cd build && make check
make[1]: Entering directory `/home/pintos/pintos/src/userprog/build'
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-none -a args-none -- -q    -f run args-none < /dev/null 2> tests/userprog/args-none.errors |tee tests/userprog/args-none.output
Copying tests/userprog/args-none to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run args-none
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'args-none' into the file system...
Erasing ustar archive...
Executing 'args-none':
(args) begin
(args) argc = 1
(args) argv[0] = 'args-none'
(args) argv[1] = null
(args) end
[+] thread [3] - syscall [1]
args-none: exit(0)
Execution of 'args-none' complete.
Timer: 329 ticks
Thread: 42 idle ticks, 246 kernel ticks, 44 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 971 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/args-none.ck tests/userprog/args-none tests/userprog/args-none.result
FAIL tests/userprog/args-none
Test output failed to match any acceptable form.

Acceptable output:
  (args) begin
  (args) argc = 1
  (args) argv[0] = 'args-none'
  (args) argv[1] = null
  (args) end
  args-none: exit(0)
Differences in `diff -u' format:
  (args) begin
  (args) argc = 1
  (args) argv[0] = 'args-none'
  (args) argv[1] = null
  (args) end
+ [+] thread [3] - syscall [1]
  args-none: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-single -a args-single -- -q    -f run 'args-single onearg' < /dev/null 2> tests/userprog/args-single.errors |tee tests/userprog/args-single.output
Copying tests/userprog/args-single to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run 'args-single onearg'
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'args-single' into the file system...
Erasing ustar archive...
Executing 'args-single onearg':
(args) begin
(args) argc = 2
(args) argv[0] = 'args-single'
(args) argv[1] = 'onearg'
(args) argv[2] = null
(args) end
[+] thread [3] - syscall [1]
args-single: exit(0)
Execution of 'args-single onearg' complete.
Timer: 338 ticks
Thread: 42 idle ticks, 248 kernel ticks, 50 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1032 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/args-single.ck tests/userprog/args-single tests/userprog/args-single.result
FAIL tests/userprog/args-single
Test output failed to match any acceptable form.

Acceptable output:
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'args-single'
  (args) argv[1] = 'onearg'
  (args) argv[2] = null
  (args) end
  args-single: exit(0)
Differences in `diff -u' format:
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'args-single'
  (args) argv[1] = 'onearg'
  (args) argv[2] = null
  (args) end
+ [+] thread [3] - syscall [1]
  args-single: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-multiple -a args-multiple -- -q    -f run 'args-multiple some arguments for you!' < /dev/null 2> tests/userprog/args-multiple.errors |tee tests/userprog/args-multiple.output
Copying tests/userprog/args-multiple to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run 'args-multiple some arguments for you!'
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'args-multiple' into the file system...
Erasing ustar archive...
Executing 'args-multiple some arguments for you!':
(args) begin
(args) argc = 5
(args) argv[0] = 'args-multiple'
(args) argv[1] = 'some'
(args) argv[2] = 'arguments'
(args) argv[3] = 'for'
(args) argv[4] = 'you!'
(args) argv[5] = null
(args) end
[+] thread [3] - syscall [1]
args-multiple: exit(0)
Execution of 'args-multiple some arguments for you!' complete.
Timer: 358 ticks
Thread: 43 idle ticks, 253 kernel ticks, 65 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1169 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/args-multiple.ck tests/userprog/args-multiple tests/userprog/args-multiple.result
FAIL tests/userprog/args-multiple
Test output failed to match any acceptable form.

Acceptable output:
  (args) begin
  (args) argc = 5
  (args) argv[0] = 'args-multiple'
  (args) argv[1] = 'some'
  (args) argv[2] = 'arguments'
  (args) argv[3] = 'for'
  (args) argv[4] = 'you!'
  (args) argv[5] = null
  (args) end
  args-multiple: exit(0)
Differences in `diff -u' format:
  (args) begin
  (args) argc = 5
  (args) argv[0] = 'args-multiple'
  (args) argv[1] = 'some'
  (args) argv[2] = 'arguments'
  (args) argv[3] = 'for'
  (args) argv[4] = 'you!'
  (args) argv[5] = null
  (args) end
+ [+] thread [3] - syscall [1]
  args-multiple: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-many -a args-many -- -q    -f run 'args-many a b c d e f g h i j k l m n o p q r s t u v' < /dev/null 2> tests/userprog/args-many.errors |tee tests/userprog/args-many.output
Copying tests/userprog/args-many to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run 'args-many a b c d e f g h i j k l m n o p q r s t u v'
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'args-many' into the file system...
Erasing ustar archive...
Executing 'args-many a b c d e f g h i j k l m n o p q r s t u v':
(args) begin
(args) argc = 23
(args) argv[0] = 'args-many'
(args) argv[1] = 'a'
(args) argv[2] = 'b'
(args) argv[3] = 'c'
(args) argv[4] = 'd'
(args) argv[5] = 'e'
(args) argv[6] = 'f'
(args) argv[7] = 'g'
(args) argv[8] = 'h'
(args) argv[9] = 'i'
(args) argv[10] = 'j'
(args) argv[11] = 'k'
(args) argv[12] = 'l'
(args) argv[13] = 'm'
(args) argv[14] = 'n'
(args) argv[15] = 'o'
(args) argv[16] = 'p'
(args) argv[17] = 'q'
(args) argv[18] = 'r'
(args) argv[19] = 's'
(args) argv[20] = 't'
(args) argv[21] = 'u'
(args) argv[22] = 'v'
(args) argv[23] = null
(args) end
[+] thread [3] - syscall [1]
args-many: exit(0)
Execution of 'args-many a b c d e f g h i j k l m n o p q r s t u v' complete.
Timer: 424 ticks
Thread: 42 idle ticks, 258 kernel ticks, 127 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1583 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/args-many.ck tests/userprog/args-many tests/userprog/args-many.result
FAIL tests/userprog/args-many
Test output failed to match any acceptable form.

Acceptable output:
  (args) begin
  (args) argc = 23
  (args) argv[0] = 'args-many'
  (args) argv[1] = 'a'
  (args) argv[2] = 'b'
  (args) argv[3] = 'c'
  (args) argv[4] = 'd'
  (args) argv[5] = 'e'
  (args) argv[6] = 'f'
  (args) argv[7] = 'g'
  (args) argv[8] = 'h'
  (args) argv[9] = 'i'
  (args) argv[10] = 'j'
  (args) argv[11] = 'k'
  (args) argv[12] = 'l'
  (args) argv[13] = 'm'
  (args) argv[14] = 'n'
  (args) argv[15] = 'o'
  (args) argv[16] = 'p'
  (args) argv[17] = 'q'
  (args) argv[18] = 'r'
  (args) argv[19] = 's'
  (args) argv[20] = 't'
  (args) argv[21] = 'u'
  (args) argv[22] = 'v'
  (args) argv[23] = null
  (args) end
  args-many: exit(0)
Differences in `diff -u' format:
  (args) begin
  (args) argc = 23
  (args) argv[0] = 'args-many'
  (args) argv[1] = 'a'
  (args) argv[2] = 'b'
  (args) argv[3] = 'c'
  (args) argv[4] = 'd'
  (args) argv[5] = 'e'
  (args) argv[6] = 'f'
  (args) argv[7] = 'g'
  (args) argv[8] = 'h'
  (args) argv[9] = 'i'
  (args) argv[10] = 'j'
  (args) argv[11] = 'k'
  (args) argv[12] = 'l'
  (args) argv[13] = 'm'
  (args) argv[14] = 'n'
  (args) argv[15] = 'o'
  (args) argv[16] = 'p'
  (args) argv[17] = 'q'
  (args) argv[18] = 'r'
  (args) argv[19] = 's'
  (args) argv[20] = 't'
  (args) argv[21] = 'u'
  (args) argv[22] = 'v'
  (args) argv[23] = null
  (args) end
+ [+] thread [3] - syscall [1]
  args-many: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/args-dbl-space -a args-dbl-space -- -q    -f run 'args-dbl-space two  spaces!' < /dev/null 2> tests/userprog/args-dbl-space.errors |tee tests/userprog/args-dbl-space.output
Copying tests/userprog/args-dbl-space to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run 'args-dbl-space two  spaces!'
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'args-dbl-space' into the file system...
Erasing ustar archive...
Executing 'args-dbl-space two  spaces!':
(args) begin
(args) argc = 3
(args) argv[0] = 'args-dbl-space'
(args) argv[1] = 'two'
(args) argv[2] = 'spaces!'
(args) argv[3] = null
(args) end
[+] thread [3] - syscall [1]
args-dbl-space: exit(0)
Execution of 'args-dbl-space two  spaces!' complete.
Timer: 344 ticks
Thread: 44 idle ticks, 249 kernel ticks, 54 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1092 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/args-dbl-space.ck tests/userprog/args-dbl-space tests/userprog/args-dbl-space.result
FAIL tests/userprog/args-dbl-space
Test output failed to match any acceptable form.

Acceptable output:
  (args) begin
  (args) argc = 3
  (args) argv[0] = 'args-dbl-space'
  (args) argv[1] = 'two'
  (args) argv[2] = 'spaces!'
  (args) argv[3] = null
  (args) end
  args-dbl-space: exit(0)
Differences in `diff -u' format:
  (args) begin
  (args) argc = 3
  (args) argv[0] = 'args-dbl-space'
  (args) argv[1] = 'two'
  (args) argv[2] = 'spaces!'
  (args) argv[3] = null
  (args) end
+ [+] thread [3] - syscall [1]
  args-dbl-space: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-bad-sp -a sc-bad-sp -- -q    -f run sc-bad-sp < /dev/null 2> tests/userprog/sc-bad-sp.errors |tee tests/userprog/sc-bad-sp.output
Copying tests/userprog/sc-bad-sp to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sc-bad-sp
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sc-bad-sp' into the file system...
Erasing ustar archive...
Executing 'sc-bad-sp':
(sc-bad-sp) begin
sc-bad-sp: exit(-1)
Execution of 'sc-bad-sp' complete.
Timer: 313 ticks
Thread: 41 idle ticks, 246 kernel ticks, 29 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 870 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/sc-bad-sp.ck tests/userprog/sc-bad-sp tests/userprog/sc-bad-sp.result
pass tests/userprog/sc-bad-sp
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-bad-arg -a sc-bad-arg -- -q    -f run sc-bad-arg < /dev/null 2> tests/userprog/sc-bad-arg.errors |tee tests/userprog/sc-bad-arg.output
Copying tests/userprog/sc-bad-arg to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sc-bad-arg
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sc-bad-arg' into the file system...
Erasing ustar archive...
Executing 'sc-bad-arg':
(sc-bad-arg) begin
[+] thread [3] - syscall [1]
sc-bad-arg: exit(-1)
Execution of 'sc-bad-arg' complete.
Timer: 320 ticks
Thread: 42 idle ticks, 246 kernel ticks, 34 user ticks
hda2 (filesys): 63 reads, 206 writes
hda3 (scratch): 100 reads, 2 writes
Console: 906 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/sc-bad-arg.ck tests/userprog/sc-bad-arg tests/userprog/sc-bad-arg.result
FAIL tests/userprog/sc-bad-arg
Test output failed to match any acceptable form.

Acceptable output:
  (sc-bad-arg) begin
  sc-bad-arg: exit(-1)
Differences in `diff -u' format:
  (sc-bad-arg) begin
+ [+] thread [3] - syscall [1]
  sc-bad-arg: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-boundary -a sc-boundary -- -q    -f run sc-boundary < /dev/null 2> tests/userprog/sc-boundary.errors |tee tests/userprog/sc-boundary.output
Copying tests/userprog/sc-boundary to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sc-boundary
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sc-boundary' into the file system...
Erasing ustar archive...
Executing 'sc-boundary':
(sc-boundary) begin
[+] thread [3] - syscall [1]
sc-boundary: exit(42)
Execution of 'sc-boundary' complete.
Timer: 328 ticks
Thread: 41 idle ticks, 253 kernel ticks, 37 user ticks
hda2 (filesys): 63 reads, 210 writes
hda3 (scratch): 102 reads, 2 writes
Console: 912 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/sc-boundary.ck tests/userprog/sc-boundary tests/userprog/sc-boundary.result
FAIL tests/userprog/sc-boundary
Test output failed to match any acceptable form.

Acceptable output:
  (sc-boundary) begin
  sc-boundary: exit(42)
Differences in `diff -u' format:
  (sc-boundary) begin
+ [+] thread [3] - syscall [1]
  sc-boundary: exit(42)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/sc-boundary-2 -a sc-boundary-2 -- -q    -f run sc-boundary-2 < /dev/null 2> tests/userprog/sc-boundary-2.errors |tee tests/userprog/sc-boundary-2.output
Copying tests/userprog/sc-boundary-2 to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sc-boundary-2
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sc-boundary-2' into the file system...
Erasing ustar archive...
Executing 'sc-boundary-2':
(sc-boundary-2) begin
[+] thread [3] - syscall [1]
sc-boundary-2: exit(67)
Execution of 'sc-boundary-2' complete.
Timer: 329 ticks
Thread: 45 idle ticks, 251 kernel ticks, 36 user ticks
hda2 (filesys): 63 reads, 210 writes
hda3 (scratch): 102 reads, 2 writes
Console: 924 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/sc-boundary-2.ck tests/userprog/sc-boundary-2 tests/userprog/sc-boundary-2.result
FAIL tests/userprog/sc-boundary-2
Test output failed to match any acceptable form.

Acceptable output:
  (sc-boundary-2) begin
  sc-boundary-2: exit(67)
Differences in `diff -u' format:
  (sc-boundary-2) begin
+ [+] thread [3] - syscall [1]
  sc-boundary-2: exit(67)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/halt -a halt -- -q    -f run halt < /dev/null 2> tests/userprog/halt.errors |tee tests/userprog/halt.output
Copying tests/userprog/halt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run halt
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'halt' into the file system...
Erasing ustar archive...
Executing 'halt':
(halt) begin
[+] thread [3] - syscall [0]
Timer: 287 ticks
Thread: 44 idle ticks, 214 kernel ticks, 32 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 824 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/halt.ck tests/userprog/halt tests/userprog/halt.result
pass tests/userprog/halt
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exit -a exit -- -q    -f run exit < /dev/null 2> tests/userprog/exit.errors |tee tests/userprog/exit.output
Copying tests/userprog/exit to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exit
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exit' into the file system...
Erasing ustar archive...
Executing 'exit':
(exit) begin
[+] thread [3] - syscall [1]
exit: exit(57)
Execution of 'exit' complete.
Timer: 314 ticks
Thread: 44 idle ticks, 242 kernel ticks, 31 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 869 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/exit.ck tests/userprog/exit tests/userprog/exit.result
FAIL tests/userprog/exit
Test output failed to match any acceptable form.

Acceptable output:
  (exit) begin
  exit: exit(57)
Differences in `diff -u' format:
  (exit) begin
+ [+] thread [3] - syscall [1]
  exit: exit(57)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-normal -a create-normal -- -q    -f run create-normal < /dev/null 2> tests/userprog/create-normal.errors |tee tests/userprog/create-normal.output
Copying tests/userprog/create-normal to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run create-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'create-normal' into the file system...
Erasing ustar archive...
Executing 'create-normal':
(create-normal) begin
(create-normal) create quux.dat
[+] thread [3] - syscall [4]
(create-normal) end
[+] thread [3] - syscall [1]
create-normal: exit(0)
Execution of 'create-normal' complete.
Timer: 344 ticks
Thread: 43 idle ticks, 246 kernel ticks, 58 user ticks
hda2 (filesys): 83 reads, 208 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1003 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/create-normal.ck tests/userprog/create-normal tests/userprog/create-normal.result
FAIL tests/userprog/create-normal
Test output failed to match any acceptable form.

Acceptable output:
  (create-normal) begin
  (create-normal) create quux.dat
  (create-normal) end
  create-normal: exit(0)
Differences in `diff -u' format:
  (create-normal) begin
  (create-normal) create quux.dat
+ [+] thread [3] - syscall [4]
  (create-normal) end
+ [+] thread [3] - syscall [1]
  create-normal: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-empty -a create-empty -- -q    -f run create-empty < /dev/null 2> tests/userprog/create-empty.errors |tee tests/userprog/create-empty.output
Copying tests/userprog/create-empty to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run create-empty
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'create-empty' into the file system...
Erasing ustar archive...
Executing 'create-empty':
(create-empty) begin
[+] thread [3] - syscall [4]
(create-empty) create(""): 0
(create-empty) end
[+] thread [3] - syscall [1]
create-empty: exit(0)
Execution of 'create-empty' complete.
Timer: 333 ticks
Thread: 43 idle ticks, 246 kernel ticks, 47 user ticks
hda2 (filesys): 64 reads, 208 writes
hda3 (scratch): 99 reads, 2 writes
Console: 993 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/create-empty.ck tests/userprog/create-empty tests/userprog/create-empty.result
FAIL tests/userprog/create-empty
Test output failed to match any acceptable form.

Acceptable output:
  (create-empty) begin
  (create-empty) create(""): 0
  (create-empty) end
  create-empty: exit(0)
Differences in `diff -u' format:
  (create-empty) begin
+ [+] thread [3] - syscall [4]
  (create-empty) create(""): 0
  (create-empty) end
+ [+] thread [3] - syscall [1]
  create-empty: exit(0)
Acceptable output:
  (create-empty) begin
  create-empty: exit(-1)
Differences in `diff -u' format:
  (create-empty) begin
- create-empty: exit(-1)
+ [+] thread [3] - syscall [4]
+ (create-empty) create(""): 0
+ (create-empty) end
+ [+] thread [3] - syscall [1]
+ create-empty: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-null -a create-null -- -q    -f run create-null < /dev/null 2> tests/userprog/create-null.errors |tee tests/userprog/create-null.output
Copying tests/userprog/create-null to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run create-null
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'create-null' into the file system...
Erasing ustar archive...
Executing 'create-null':
(create-null) begin
[+] thread [3] - syscall [4]
create-null: exit(-1)
Execution of 'create-null' complete.
Timer: 318 ticks
Thread: 42 idle ticks, 246 kernel ticks, 33 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 911 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/create-null.ck tests/userprog/create-null tests/userprog/create-null.result
FAIL tests/userprog/create-null
Test output failed to match any acceptable form.

Acceptable output:
  (create-null) begin
  create-null: exit(-1)
Differences in `diff -u' format:
  (create-null) begin
+ [+] thread [3] - syscall [4]
  create-null: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-bad-ptr -a create-bad-ptr -- -q    -f run create-bad-ptr < /dev/null 2> tests/userprog/create-bad-ptr.errors |tee tests/userprog/create-bad-ptr.output
Copying tests/userprog/create-bad-ptr to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run create-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'create-bad-ptr' into the file system...
Erasing ustar archive...
Executing 'create-bad-ptr':
(create-bad-ptr) begin
[+] thread [3] - syscall [4]
create-bad-ptr: exit(-1)
Execution of 'create-bad-ptr' complete.
Timer: 320 ticks
Thread: 43 idle ticks, 244 kernel ticks, 36 user ticks
hda2 (filesys): 64 reads, 207 writes
hda3 (scratch): 99 reads, 2 writes
Console: 929 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/create-bad-ptr.ck tests/userprog/create-bad-ptr tests/userprog/create-bad-ptr.result
FAIL tests/userprog/create-bad-ptr
Test output failed to match any acceptable form.

Acceptable output:
  (create-bad-ptr) begin
  create-bad-ptr: exit(-1)
Differences in `diff -u' format:
  (create-bad-ptr) begin
+ [+] thread [3] - syscall [4]
  create-bad-ptr: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-long -a create-long -- -q    -f run create-long < /dev/null 2> tests/userprog/create-long.errors |tee tests/userprog/create-long.output
Copying tests/userprog/create-long to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run create-long
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'create-long' into the file system...
Erasing ustar archive...
Executing 'create-long':
(create-long) begin
[+] thread [3] - syscall [4]
(create-long) create("x..."): 0
(create-long) end
[+] thread [3] - syscall [1]
create-long: exit(0)
Execution of 'create-long' complete.
Timer: 336 ticks
Thread: 42 idle ticks, 247 kernel ticks, 50 user ticks
hda2 (filesys): 64 reads, 210 writes
hda3 (scratch): 100 reads, 2 writes
Console: 990 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/create-long.ck tests/userprog/create-long tests/userprog/create-long.result
FAIL tests/userprog/create-long
Test output failed to match any acceptable form.

Acceptable output:
  (create-long) begin
  (create-long) create("x..."): 0
  (create-long) end
  create-long: exit(0)
Differences in `diff -u' format:
  (create-long) begin
+ [+] thread [3] - syscall [4]
  (create-long) create("x..."): 0
  (create-long) end
+ [+] thread [3] - syscall [1]
  create-long: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-exists -a create-exists -- -q    -f run create-exists < /dev/null 2> tests/userprog/create-exists.errors |tee tests/userprog/create-exists.output
Copying tests/userprog/create-exists to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run create-exists
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'create-exists' into the file system...
Erasing ustar archive...
Executing 'create-exists':
(create-exists) begin
(create-exists) create quux.dat
[+] thread [3] - syscall [4]
(create-exists) create warble.dat
[+] thread [3] - syscall [4]
(create-exists) try to re-create quux.dat
[+] thread [3] - syscall [4]
(create-exists) create baffle.dat
[+] thread [3] - syscall [4]
(create-exists) try to re-create quux.dat
[+] thread [3] - syscall [4]
(create-exists) end
[+] thread [3] - syscall [1]
create-exists: exit(0)
Execution of 'create-exists' complete.
Timer: 419 ticks
Thread: 43 idle ticks, 247 kernel ticks, 132 user ticks
hda2 (filesys): 133 reads, 226 writes
hda3 (scratch): 100 reads, 2 writes
Console: 1274 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/create-exists.ck tests/userprog/create-exists tests/userprog/create-exists.result
FAIL tests/userprog/create-exists
Test output failed to match any acceptable form.

Acceptable output:
  (create-exists) begin
  (create-exists) create quux.dat
  (create-exists) create warble.dat
  (create-exists) try to re-create quux.dat
  (create-exists) create baffle.dat
  (create-exists) try to re-create quux.dat
  (create-exists) end
  create-exists: exit(0)
Differences in `diff -u' format:
  (create-exists) begin
  (create-exists) create quux.dat
+ [+] thread [3] - syscall [4]
  (create-exists) create warble.dat
+ [+] thread [3] - syscall [4]
  (create-exists) try to re-create quux.dat
+ [+] thread [3] - syscall [4]
  (create-exists) create baffle.dat
+ [+] thread [3] - syscall [4]
  (create-exists) try to re-create quux.dat
+ [+] thread [3] - syscall [4]
  (create-exists) end
+ [+] thread [3] - syscall [1]
  create-exists: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/create-bound -a create-bound -- -q    -f run create-bound < /dev/null 2> tests/userprog/create-bound.errors |tee tests/userprog/create-bound.output
Copying tests/userprog/create-bound to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run create-bound
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'create-bound' into the file system...
Erasing ustar archive...
Executing 'create-bound':
(create-bound) begin
[+] thread [3] - syscall [4]
(create-bound) create("quux.dat"): 1
(create-bound) end
[+] thread [3] - syscall [1]
create-bound: exit(0)
Execution of 'create-bound' complete.
Timer: 354 ticks
Thread: 42 idle ticks, 254 kernel ticks, 61 user ticks
hda2 (filesys): 83 reads, 214 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1002 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/create-bound.ck tests/userprog/create-bound tests/userprog/create-bound.result
FAIL tests/userprog/create-bound
Test output failed to match any acceptable form.

Acceptable output:
  (create-bound) begin
  (create-bound) create("quux.dat"): 1
  (create-bound) end
  create-bound: exit(0)
Differences in `diff -u' format:
  (create-bound) begin
+ [+] thread [3] - syscall [4]
  (create-bound) create("quux.dat"): 1
  (create-bound) end
+ [+] thread [3] - syscall [1]
  create-bound: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-normal -a open-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run open-normal < /dev/null 2> tests/userprog/open-normal.errors |tee tests/userprog/open-normal.output
Copying tests/userprog/open-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 102 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'open-normal':
(open-normal) begin
[+] thread [3] - syscall [6]
(open-normal) end
[+] thread [3] - syscall [1]
open-normal: exit(0)
Execution of 'open-normal' complete.
Timer: 354 ticks
Thread: 43 idle ticks, 271 kernel ticks, 43 user ticks
hda2 (filesys): 92 reads, 210 writes
hda3 (scratch): 101 reads, 2 writes
Console: 1003 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/open-normal.ck tests/userprog/open-normal tests/userprog/open-normal.result
FAIL tests/userprog/open-normal
Test output failed to match any acceptable form.

Acceptable output:
  (open-normal) begin
  (open-normal) end
  open-normal: exit(0)
Differences in `diff -u' format:
  (open-normal) begin
+ [+] thread [3] - syscall [6]
  (open-normal) end
+ [+] thread [3] - syscall [1]
  open-normal: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-missing -a open-missing -- -q    -f run open-missing < /dev/null 2> tests/userprog/open-missing.errors |tee tests/userprog/open-missing.output
Copying tests/userprog/open-missing to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-missing
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-missing' into the file system...
Erasing ustar archive...
Executing 'open-missing':
(open-missing) begin
[+] thread [3] - syscall [6]
(open-missing) end
[+] thread [3] - syscall [1]
open-missing: exit(0)
Execution of 'open-missing' complete.
Timer: 336 ticks
Thread: 42 idle ticks, 248 kernel ticks, 49 user ticks
hda2 (filesys): 80 reads, 206 writes
hda3 (scratch): 100 reads, 2 writes
Console: 965 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/open-missing.ck tests/userprog/open-missing tests/userprog/open-missing.result
FAIL tests/userprog/open-missing
Test output failed to match any acceptable form.

Acceptable output:
  (open-missing) begin
  (open-missing) end
  open-missing: exit(0)
Differences in `diff -u' format:
  (open-missing) begin
+ [+] thread [3] - syscall [6]
  (open-missing) end
+ [+] thread [3] - syscall [1]
  open-missing: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-boundary -a open-boundary -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run open-boundary < /dev/null 2> tests/userprog/open-boundary.errors |tee tests/userprog/open-boundary.output
Copying tests/userprog/open-boundary to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-boundary
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 105 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-boundary' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'open-boundary':
(open-boundary) begin
(open-boundary) open "sample.txt"
[+] thread [3] - syscall [6]
(open-boundary) end
[+] thread [3] - syscall [1]
open-boundary: exit(0)
Execution of 'open-boundary' complete.
Timer: 372 ticks
Thread: 48 idle ticks, 274 kernel ticks, 52 user ticks
hda2 (filesys): 92 reads, 216 writes
hda3 (scratch): 104 reads, 2 writes
Console: 1051 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/open-boundary.ck tests/userprog/open-boundary tests/userprog/open-boundary.result
FAIL tests/userprog/open-boundary
Test output failed to match any acceptable form.

Acceptable output:
  (open-boundary) begin
  (open-boundary) open "sample.txt"
  (open-boundary) end
  open-boundary: exit(0)
Differences in `diff -u' format:
  (open-boundary) begin
  (open-boundary) open "sample.txt"
+ [+] thread [3] - syscall [6]
  (open-boundary) end
+ [+] thread [3] - syscall [1]
  open-boundary: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-empty -a open-empty -- -q    -f run open-empty < /dev/null 2> tests/userprog/open-empty.errors |tee tests/userprog/open-empty.output
Copying tests/userprog/open-empty to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-empty
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-empty' into the file system...
Erasing ustar archive...
Executing 'open-empty':
(open-empty) begin
[+] thread [3] - syscall [6]
(open-empty) end
[+] thread [3] - syscall [1]
open-empty: exit(0)
Execution of 'open-empty' complete.
Timer: 334 ticks
Thread: 41 idle ticks, 247 kernel ticks, 49 user ticks
hda2 (filesys): 80 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 950 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/open-empty.ck tests/userprog/open-empty tests/userprog/open-empty.result
FAIL tests/userprog/open-empty
Test output failed to match any acceptable form.

Acceptable output:
  (open-empty) begin
  (open-empty) end
  open-empty: exit(0)
Differences in `diff -u' format:
  (open-empty) begin
+ [+] thread [3] - syscall [6]
  (open-empty) end
+ [+] thread [3] - syscall [1]
  open-empty: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-null -a open-null -- -q    -f run open-null < /dev/null 2> tests/userprog/open-null.errors |tee tests/userprog/open-null.output
Copying tests/userprog/open-null to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-null
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-null' into the file system...
Erasing ustar archive...
Executing 'open-null':
(open-null) begin
[+] thread [3] - syscall [6]
open-null: exit(-1)
Execution of 'open-null' complete.
Timer: 317 ticks
Thread: 41 idle ticks, 246 kernel ticks, 33 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 899 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/open-null.ck tests/userprog/open-null tests/userprog/open-null.result
FAIL tests/userprog/open-null
Test output failed to match any acceptable form.

Acceptable output:
  (open-null) begin
  (open-null) end
  open-null: exit(0)
Differences in `diff -u' format:
  (open-null) begin
- (open-null) end
- open-null: exit(0)
+ [+] thread [3] - syscall [6]
+ open-null: exit(-1)
Acceptable output:
  (open-null) begin
  open-null: exit(-1)
Differences in `diff -u' format:
  (open-null) begin
+ [+] thread [3] - syscall [6]
  open-null: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-bad-ptr -a open-bad-ptr -- -q    -f run open-bad-ptr < /dev/null 2> tests/userprog/open-bad-ptr.errors |tee tests/userprog/open-bad-ptr.output
Copying tests/userprog/open-bad-ptr to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-bad-ptr' into the file system...
Erasing ustar archive...
Executing 'open-bad-ptr':
(open-bad-ptr) begin
[+] thread [3] - syscall [6]
open-bad-ptr: exit(-1)
Execution of 'open-bad-ptr' complete.
Timer: 318 ticks
Thread: 43 idle ticks, 245 kernel ticks, 33 user ticks
hda2 (filesys): 65 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 917 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/open-bad-ptr.ck tests/userprog/open-bad-ptr tests/userprog/open-bad-ptr.result
FAIL tests/userprog/open-bad-ptr
Test output failed to match any acceptable form.

Acceptable output:
  (open-bad-ptr) begin
  (open-bad-ptr) end
  open-bad-ptr: exit(0)
Differences in `diff -u' format:
  (open-bad-ptr) begin
- (open-bad-ptr) end
- open-bad-ptr: exit(0)
+ [+] thread [3] - syscall [6]
+ open-bad-ptr: exit(-1)
Acceptable output:
  (open-bad-ptr) begin
  open-bad-ptr: exit(-1)
Differences in `diff -u' format:
  (open-bad-ptr) begin
+ [+] thread [3] - syscall [6]
  open-bad-ptr: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/open-twice -a open-twice -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run open-twice < /dev/null 2> tests/userprog/open-twice.errors |tee tests/userprog/open-twice.output
Copying tests/userprog/open-twice to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run open-twice
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'open-twice' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'open-twice':
(open-twice) begin
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [6]
(open-twice) open "sample.txt" once
[+] thread [3] - syscall [6]
(open-twice) open "sample.txt" again
[+] thread [3] - syscall [6]
(open-twice) end
[+] thread [3] - syscall [1]
open-twice: exit(0)
Execution of 'open-twice' complete.
Timer: 384 ticks
Thread: 45 idle ticks, 270 kernel ticks, 72 user ticks
hda2 (filesys): 101 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1157 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/open-twice.ck tests/userprog/open-twice tests/userprog/open-twice.result
FAIL tests/userprog/open-twice
Test output failed to match any acceptable form.

Acceptable output:
  (open-twice) begin
  (open-twice) open "sample.txt" once
  (open-twice) open "sample.txt" again
  (open-twice) end
  open-twice: exit(0)
Differences in `diff -u' format:
  (open-twice) begin
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [6]
  (open-twice) open "sample.txt" once
+ [+] thread [3] - syscall [6]
  (open-twice) open "sample.txt" again
+ [+] thread [3] - syscall [6]
  (open-twice) end
+ [+] thread [3] - syscall [1]
  open-twice: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-normal -a close-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run close-normal < /dev/null 2> tests/userprog/close-normal.errors |tee tests/userprog/close-normal.output
Copying tests/userprog/close-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'close-normal':
(close-normal) begin
(close-normal) open "sample.txt"
[+] thread [3] - syscall [6]
(close-normal) close "sample.txt"
[+] thread [3] - syscall [12]
(close-normal) end
[+] thread [3] - syscall [1]
close-normal: exit(0)
Execution of 'close-normal' complete.
Timer: 370 ticks
Thread: 43 idle ticks, 274 kernel ticks, 56 user ticks
hda2 (filesys): 92 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1107 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/close-normal.ck tests/userprog/close-normal tests/userprog/close-normal.result
FAIL tests/userprog/close-normal
Test output failed to match any acceptable form.

Acceptable output:
  (close-normal) begin
  (close-normal) open "sample.txt"
  (close-normal) close "sample.txt"
  (close-normal) end
  close-normal: exit(0)
Differences in `diff -u' format:
  (close-normal) begin
  (close-normal) open "sample.txt"
+ [+] thread [3] - syscall [6]
  (close-normal) close "sample.txt"
+ [+] thread [3] - syscall [12]
  (close-normal) end
+ [+] thread [3] - syscall [1]
  close-normal: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-twice -a close-twice -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run close-twice < /dev/null 2> tests/userprog/close-twice.errors |tee tests/userprog/close-twice.output
Copying tests/userprog/close-twice to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-twice
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-twice' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'close-twice':
(close-twice) begin
(close-twice) open "sample.txt"
[+] thread [3] - syscall [6]
(close-twice) close "sample.txt"
[+] thread [3] - syscall [12]
(close-twice) close "sample.txt" again
[+] thread [3] - syscall [12]
(close-twice) end
[+] thread [3] - syscall [1]
close-twice: exit(0)
Execution of 'close-twice' complete.
Timer: 379 ticks
Thread: 45 idle ticks, 271 kernel ticks, 66 user ticks
hda2 (filesys): 92 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1167 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/close-twice.ck tests/userprog/close-twice tests/userprog/close-twice.result
FAIL tests/userprog/close-twice
Test output failed to match any acceptable form.

Acceptable output:
  (close-twice) begin
  (close-twice) open "sample.txt"
  (close-twice) close "sample.txt"
  (close-twice) close "sample.txt" again
  (close-twice) end
  close-twice: exit(0)
Differences in `diff -u' format:
  (close-twice) begin
  (close-twice) open "sample.txt"
+ [+] thread [3] - syscall [6]
  (close-twice) close "sample.txt"
+ [+] thread [3] - syscall [12]
  (close-twice) close "sample.txt" again
+ [+] thread [3] - syscall [12]
  (close-twice) end
+ [+] thread [3] - syscall [1]
  close-twice: exit(0)
Acceptable output:
  (close-twice) begin
  (close-twice) open "sample.txt"
  (close-twice) close "sample.txt"
  (close-twice) close "sample.txt" again
  close-twice: exit(-1)
Differences in `diff -u' format:
  (close-twice) begin
  (close-twice) open "sample.txt"
+ [+] thread [3] - syscall [6]
  (close-twice) close "sample.txt"
+ [+] thread [3] - syscall [12]
  (close-twice) close "sample.txt" again
- close-twice: exit(-1)
+ [+] thread [3] - syscall [12]
+ (close-twice) end
+ [+] thread [3] - syscall [1]
+ close-twice: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-stdin -a close-stdin -- -q    -f run close-stdin < /dev/null 2> tests/userprog/close-stdin.errors |tee tests/userprog/close-stdin.output
Copying tests/userprog/close-stdin to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-stdin
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-stdin' into the file system...
Erasing ustar archive...
Executing 'close-stdin':
(close-stdin) begin
[+] thread [3] - syscall [12]
(close-stdin) end
[+] thread [3] - syscall [1]
close-stdin: exit(0)
Execution of 'close-stdin' complete.
Timer: 326 ticks
Thread: 42 idle ticks, 247 kernel ticks, 40 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 958 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/close-stdin.ck tests/userprog/close-stdin tests/userprog/close-stdin.result
FAIL tests/userprog/close-stdin
Test output failed to match any acceptable form.

Acceptable output:
  (close-stdin) begin
  (close-stdin) end
  close-stdin: exit(0)
Differences in `diff -u' format:
  (close-stdin) begin
+ [+] thread [3] - syscall [12]
  (close-stdin) end
+ [+] thread [3] - syscall [1]
  close-stdin: exit(0)
Acceptable output:
  (close-stdin) begin
  close-stdin: exit(-1)
Differences in `diff -u' format:
  (close-stdin) begin
- close-stdin: exit(-1)
+ [+] thread [3] - syscall [12]
+ (close-stdin) end
+ [+] thread [3] - syscall [1]
+ close-stdin: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-stdout -a close-stdout -- -q    -f run close-stdout < /dev/null 2> tests/userprog/close-stdout.errors |tee tests/userprog/close-stdout.output
Copying tests/userprog/close-stdout to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-stdout
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-stdout' into the file system...
Erasing ustar archive...
Executing 'close-stdout':
(close-stdout) begin
[+] thread [3] - syscall [12]
(close-stdout) end
[+] thread [3] - syscall [1]
close-stdout: exit(0)
Execution of 'close-stdout' complete.
Timer: 326 ticks
Thread: 42 idle ticks, 247 kernel ticks, 40 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 965 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/close-stdout.ck tests/userprog/close-stdout tests/userprog/close-stdout.result
FAIL tests/userprog/close-stdout
Test output failed to match any acceptable form.

Acceptable output:
  (close-stdout) begin
  (close-stdout) end
  close-stdout: exit(0)
Differences in `diff -u' format:
  (close-stdout) begin
+ [+] thread [3] - syscall [12]
  (close-stdout) end
+ [+] thread [3] - syscall [1]
  close-stdout: exit(0)
Acceptable output:
  (close-stdout) begin
  close-stdout: exit(-1)
Differences in `diff -u' format:
  (close-stdout) begin
- close-stdout: exit(-1)
+ [+] thread [3] - syscall [12]
+ (close-stdout) end
+ [+] thread [3] - syscall [1]
+ close-stdout: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/close-bad-fd -a close-bad-fd -- -q    -f run close-bad-fd < /dev/null 2> tests/userprog/close-bad-fd.errors |tee tests/userprog/close-bad-fd.output
Copying tests/userprog/close-bad-fd to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run close-bad-fd
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'close-bad-fd' into the file system...
Erasing ustar archive...
Executing 'close-bad-fd':
(close-bad-fd) begin
[+] thread [3] - syscall [12]
(close-bad-fd) end
[+] thread [3] - syscall [1]
close-bad-fd: exit(0)
Execution of 'close-bad-fd' complete.
Timer: 326 ticks
Thread: 42 idle ticks, 247 kernel ticks, 40 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 965 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/close-bad-fd.ck tests/userprog/close-bad-fd tests/userprog/close-bad-fd.result
FAIL tests/userprog/close-bad-fd
Test output failed to match any acceptable form.

Acceptable output:
  (close-bad-fd) begin
  (close-bad-fd) end
  close-bad-fd: exit(0)
Differences in `diff -u' format:
  (close-bad-fd) begin
+ [+] thread [3] - syscall [12]
  (close-bad-fd) end
+ [+] thread [3] - syscall [1]
  close-bad-fd: exit(0)
Acceptable output:
  (close-bad-fd) begin
  close-bad-fd: exit(-1)
Differences in `diff -u' format:
  (close-bad-fd) begin
- close-bad-fd: exit(-1)
+ [+] thread [3] - syscall [12]
+ (close-bad-fd) end
+ [+] thread [3] - syscall [1]
+ close-bad-fd: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-normal -a read-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run read-normal < /dev/null 2> tests/userprog/read-normal.errors |tee tests/userprog/read-normal.output
Copying tests/userprog/read-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-normal':
(read-normal) begin
(read-normal) open "sample.txt" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
(read-normal) verified contents of "sample.txt"
(read-normal) close "sample.txt"
[+] thread [3] - syscall [12]
(read-normal) end
[+] thread [3] - syscall [1]
read-normal: exit(0)
Execution of 'read-normal' complete.
Timer: 387 ticks
Thread: 43 idle ticks, 273 kernel ticks, 74 user ticks
hda2 (filesys): 93 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1221 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/read-normal.ck tests/userprog/read-normal tests/userprog/read-normal.result
FAIL tests/userprog/read-normal
Test output failed to match any acceptable form.

Acceptable output:
  (read-normal) begin
  (read-normal) open "sample.txt" for verification
  (read-normal) verified contents of "sample.txt"
  (read-normal) close "sample.txt"
  (read-normal) end
  read-normal: exit(0)
Differences in `diff -u' format:
  (read-normal) begin
  (read-normal) open "sample.txt" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
  (read-normal) verified contents of "sample.txt"
  (read-normal) close "sample.txt"
+ [+] thread [3] - syscall [12]
  (read-normal) end
+ [+] thread [3] - syscall [1]
  read-normal: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-bad-ptr -a read-bad-ptr -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run read-bad-ptr < /dev/null 2> tests/userprog/read-bad-ptr.errors |tee tests/userprog/read-bad-ptr.output
Copying tests/userprog/read-bad-ptr to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-bad-ptr' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-bad-ptr':
(read-bad-ptr) begin
(read-bad-ptr) open "sample.txt"
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [8]
read-bad-ptr: exit(-1)
Execution of 'read-bad-ptr' complete.
Timer: 358 ticks
Thread: 43 idle ticks, 274 kernel ticks, 44 user ticks
hda2 (filesys): 92 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1025 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/read-bad-ptr.ck tests/userprog/read-bad-ptr tests/userprog/read-bad-ptr.result
FAIL tests/userprog/read-bad-ptr
Test output failed to match any acceptable form.

Acceptable output:
  (read-bad-ptr) begin
  (read-bad-ptr) open "sample.txt"
  (read-bad-ptr) end
  read-bad-ptr: exit(0)
Differences in `diff -u' format:
  (read-bad-ptr) begin
  (read-bad-ptr) open "sample.txt"
- (read-bad-ptr) end
- read-bad-ptr: exit(0)
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [8]
+ read-bad-ptr: exit(-1)
Acceptable output:
  (read-bad-ptr) begin
  (read-bad-ptr) open "sample.txt"
  read-bad-ptr: exit(-1)
Differences in `diff -u' format:
  (read-bad-ptr) begin
  (read-bad-ptr) open "sample.txt"
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [8]
  read-bad-ptr: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-boundary -a read-boundary -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run read-boundary < /dev/null 2> tests/userprog/read-boundary.errors |tee tests/userprog/read-boundary.output
Copying tests/userprog/read-boundary to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-boundary
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 106 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-boundary' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-boundary':
(read-boundary) begin
(read-boundary) open "sample.txt"
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [8]
(read-boundary) end
[+] thread [3] - syscall [1]
read-boundary: exit(0)
Execution of 'read-boundary' complete.
Timer: 377 ticks
Thread: 50 idle ticks, 273 kernel ticks, 57 user ticks
hda2 (filesys): 94 reads, 218 writes
hda3 (scratch): 105 reads, 2 writes
Console: 1080 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/read-boundary.ck tests/userprog/read-boundary tests/userprog/read-boundary.result
FAIL tests/userprog/read-boundary
Test output failed to match any acceptable form.

Acceptable output:
  (read-boundary) begin
  (read-boundary) open "sample.txt"
  (read-boundary) end
  read-boundary: exit(0)
Differences in `diff -u' format:
  (read-boundary) begin
  (read-boundary) open "sample.txt"
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [8]
  (read-boundary) end
+ [+] thread [3] - syscall [1]
  read-boundary: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-zero -a read-zero -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run read-zero < /dev/null 2> tests/userprog/read-zero.errors |tee tests/userprog/read-zero.output
Copying tests/userprog/read-zero to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-zero
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-zero' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'read-zero':
(read-zero) begin
(read-zero) open "sample.txt"
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [8]
(read-zero) end
[+] thread [3] - syscall [1]
read-zero: exit(0)
Execution of 'read-zero' complete.
Timer: 363 ticks
Thread: 44 idle ticks, 271 kernel ticks, 50 user ticks
hda2 (filesys): 92 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1048 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/read-zero.ck tests/userprog/read-zero tests/userprog/read-zero.result
FAIL tests/userprog/read-zero
Test output failed to match any acceptable form.

Acceptable output:
  (read-zero) begin
  (read-zero) open "sample.txt"
  (read-zero) end
  read-zero: exit(0)
Differences in `diff -u' format:
  (read-zero) begin
  (read-zero) open "sample.txt"
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [8]
  (read-zero) end
+ [+] thread [3] - syscall [1]
  read-zero: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-stdout -a read-stdout -- -q    -f run read-stdout < /dev/null 2> tests/userprog/read-stdout.errors |tee tests/userprog/read-stdout.output
Copying tests/userprog/read-stdout to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-stdout
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-stdout' into the file system...
Erasing ustar archive...
Executing 'read-stdout':
(read-stdout) begin
[+] thread [3] - syscall [8]
(read-stdout) end
[+] thread [3] - syscall [1]
read-stdout: exit(0)
Execution of 'read-stdout' complete.
Timer: 325 ticks
Thread: 42 idle ticks, 246 kernel ticks, 40 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 957 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/read-stdout.ck tests/userprog/read-stdout tests/userprog/read-stdout.result
FAIL tests/userprog/read-stdout
Test output failed to match any acceptable form.

Acceptable output:
  (read-stdout) begin
  (read-stdout) end
  read-stdout: exit(0)
Differences in `diff -u' format:
  (read-stdout) begin
+ [+] thread [3] - syscall [8]
  (read-stdout) end
+ [+] thread [3] - syscall [1]
  read-stdout: exit(0)
Acceptable output:
  (read-stdout) begin
  read-stdout: exit(-1)
Differences in `diff -u' format:
  (read-stdout) begin
- read-stdout: exit(-1)
+ [+] thread [3] - syscall [8]
+ (read-stdout) end
+ [+] thread [3] - syscall [1]
+ read-stdout: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/read-bad-fd -a read-bad-fd -- -q    -f run read-bad-fd < /dev/null 2> tests/userprog/read-bad-fd.errors |tee tests/userprog/read-bad-fd.output
Copying tests/userprog/read-bad-fd to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run read-bad-fd
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'read-bad-fd' into the file system...
Erasing ustar archive...
Executing 'read-bad-fd':
(read-bad-fd) begin
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(read-bad-fd) end
[+] thread [3] - syscall [1]
read-bad-fd: exit(0)
Execution of 'read-bad-fd' complete.
Timer: 352 ticks
Thread: 42 idle ticks, 247 kernel ticks, 66 user ticks
hda2 (filesys): 63 reads, 206 writes
hda3 (scratch): 100 reads, 2 writes
Console: 1132 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/read-bad-fd.ck tests/userprog/read-bad-fd tests/userprog/read-bad-fd.result
FAIL tests/userprog/read-bad-fd
Test output failed to match any acceptable form.

Acceptable output:
  (read-bad-fd) begin
  (read-bad-fd) end
  read-bad-fd: exit(0)
Differences in `diff -u' format:
  (read-bad-fd) begin
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (read-bad-fd) end
+ [+] thread [3] - syscall [1]
  read-bad-fd: exit(0)
Acceptable output:
  (read-bad-fd) begin
  read-bad-fd: exit(-1)
Differences in `diff -u' format:
  (read-bad-fd) begin
- read-bad-fd: exit(-1)
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ (read-bad-fd) end
+ [+] thread [3] - syscall [1]
+ read-bad-fd: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-normal -a write-normal -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run write-normal < /dev/null 2> tests/userprog/write-normal.errors |tee tests/userprog/write-normal.output
Copying tests/userprog/write-normal to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-normal
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-normal' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-normal':
(write-normal) begin
(write-normal) create "test.txt"
[+] thread [3] - syscall [4]
(write-normal) open "test.txt"
[+] thread [3] - syscall [6]
(write-normal) end
[+] thread [3] - syscall [1]
write-normal: exit(0)
Execution of 'write-normal' complete.
Timer: 386 ticks
Thread: 44 idle ticks, 273 kernel ticks, 72 user ticks
hda2 (filesys): 115 reads, 220 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1104 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/write-normal.ck tests/userprog/write-normal tests/userprog/write-normal.result
FAIL tests/userprog/write-normal
Test output failed to match any acceptable form.

Acceptable output:
  (write-normal) begin
  (write-normal) create "test.txt"
  (write-normal) open "test.txt"
  (write-normal) end
  write-normal: exit(0)
Differences in `diff -u' format:
  (write-normal) begin
  (write-normal) create "test.txt"
+ [+] thread [3] - syscall [4]
  (write-normal) open "test.txt"
+ [+] thread [3] - syscall [6]
  (write-normal) end
+ [+] thread [3] - syscall [1]
  write-normal: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-bad-ptr -a write-bad-ptr -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run write-bad-ptr < /dev/null 2> tests/userprog/write-bad-ptr.errors |tee tests/userprog/write-bad-ptr.output
Copying tests/userprog/write-bad-ptr to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-bad-ptr' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-bad-ptr':
(write-bad-ptr) begin
(write-bad-ptr) open "sample.txt"
[+] thread [3] - syscall [6]
write-bad-ptr: exit(-1)
Execution of 'write-bad-ptr' complete.
Timer: 354 ticks
Thread: 43 idle ticks, 273 kernel ticks, 41 user ticks
hda2 (filesys): 93 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1003 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/write-bad-ptr.ck tests/userprog/write-bad-ptr tests/userprog/write-bad-ptr.result
FAIL tests/userprog/write-bad-ptr
Test output failed to match any acceptable form.

Acceptable output:
  (write-bad-ptr) begin
  (write-bad-ptr) open "sample.txt"
  (write-bad-ptr) end
  write-bad-ptr: exit(0)
Differences in `diff -u' format:
  (write-bad-ptr) begin
  (write-bad-ptr) open "sample.txt"
- (write-bad-ptr) end
- write-bad-ptr: exit(0)
+ [+] thread [3] - syscall [6]
+ write-bad-ptr: exit(-1)
Acceptable output:
  (write-bad-ptr) begin
  (write-bad-ptr) open "sample.txt"
  write-bad-ptr: exit(-1)
Differences in `diff -u' format:
  (write-bad-ptr) begin
  (write-bad-ptr) open "sample.txt"
+ [+] thread [3] - syscall [6]
  write-bad-ptr: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-boundary -a write-boundary -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run write-boundary < /dev/null 2> tests/userprog/write-boundary.errors |tee tests/userprog/write-boundary.output
Copying tests/userprog/write-boundary to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-boundary
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 106 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-boundary' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-boundary':
(write-boundary) begin
(write-boundary) open "sample.txt"
[+] thread [3] - syscall [6]
(write-boundary) end
[+] thread [3] - syscall [1]
write-boundary: exit(0)
Execution of 'write-boundary' complete.
Timer: 373 ticks
Thread: 47 idle ticks, 275 kernel ticks, 54 user ticks
hda2 (filesys): 94 reads, 219 writes
hda3 (scratch): 105 reads, 2 writes
Console: 1059 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/write-boundary.ck tests/userprog/write-boundary tests/userprog/write-boundary.result
FAIL tests/userprog/write-boundary
Test output failed to match any acceptable form.

Acceptable output:
  (write-boundary) begin
  (write-boundary) open "sample.txt"
  (write-boundary) end
  write-boundary: exit(0)
Differences in `diff -u' format:
  (write-boundary) begin
  (write-boundary) open "sample.txt"
+ [+] thread [3] - syscall [6]
  (write-boundary) end
+ [+] thread [3] - syscall [1]
  write-boundary: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-zero -a write-zero -p ../../tests/userprog/sample.txt -a sample.txt -- -q    -f run write-zero < /dev/null 2> tests/userprog/write-zero.errors |tee tests/userprog/write-zero.output
Copying tests/userprog/write-zero to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-zero
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 103 sectors (51 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-zero' into the file system...
Putting 'sample.txt' into the file system...
Erasing ustar archive...
Executing 'write-zero':
(write-zero) begin
(write-zero) open "sample.txt"
[+] thread [3] - syscall [6]
(write-zero) end
[+] thread [3] - syscall [1]
write-zero: exit(0)
Execution of 'write-zero' complete.
Timer: 359 ticks
Thread: 44 idle ticks, 270 kernel ticks, 48 user ticks
hda2 (filesys): 92 reads, 212 writes
hda3 (scratch): 102 reads, 2 writes
Console: 1027 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/write-zero.ck tests/userprog/write-zero tests/userprog/write-zero.result
FAIL tests/userprog/write-zero
Test output failed to match any acceptable form.

Acceptable output:
  (write-zero) begin
  (write-zero) open "sample.txt"
  (write-zero) end
  write-zero: exit(0)
Differences in `diff -u' format:
  (write-zero) begin
  (write-zero) open "sample.txt"
+ [+] thread [3] - syscall [6]
  (write-zero) end
+ [+] thread [3] - syscall [1]
  write-zero: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-stdin -a write-stdin -- -q    -f run write-stdin < /dev/null 2> tests/userprog/write-stdin.errors |tee tests/userprog/write-stdin.output
Copying tests/userprog/write-stdin to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-stdin
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-stdin' into the file system...
Erasing ustar archive...
Executing 'write-stdin':
(write-stdin) begin
(write-stdin) end
[+] thread [3] - syscall [1]
write-stdin: exit(0)
Execution of 'write-stdin' complete.
Timer: 321 ticks
Thread: 42 idle ticks, 246 kernel ticks, 36 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 928 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/write-stdin.ck tests/userprog/write-stdin tests/userprog/write-stdin.result
FAIL tests/userprog/write-stdin
Test output failed to match any acceptable form.

Acceptable output:
  (write-stdin) begin
  (write-stdin) end
  write-stdin: exit(0)
Differences in `diff -u' format:
  (write-stdin) begin
  (write-stdin) end
+ [+] thread [3] - syscall [1]
  write-stdin: exit(0)
Acceptable output:
  (write-stdin) begin
  write-stdin: exit(-1)
Differences in `diff -u' format:
  (write-stdin) begin
- write-stdin: exit(-1)
+ (write-stdin) end
+ [+] thread [3] - syscall [1]
+ write-stdin: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/write-bad-fd -a write-bad-fd -- -q    -f run write-bad-fd < /dev/null 2> tests/userprog/write-bad-fd.errors |tee tests/userprog/write-bad-fd.output
Copying tests/userprog/write-bad-fd to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run write-bad-fd
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'write-bad-fd' into the file system...
Erasing ustar archive...
Executing 'write-bad-fd':
(write-bad-fd) begin
(write-bad-fd) end
[+] thread [3] - syscall [1]
write-bad-fd: exit(0)
Execution of 'write-bad-fd' complete.
Timer: 324 ticks
Thread: 42 idle ticks, 248 kernel ticks, 37 user ticks
hda2 (filesys): 63 reads, 206 writes
hda3 (scratch): 100 reads, 2 writes
Console: 936 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/write-bad-fd.ck tests/userprog/write-bad-fd tests/userprog/write-bad-fd.result
FAIL tests/userprog/write-bad-fd
Test output failed to match any acceptable form.

Acceptable output:
  (write-bad-fd) begin
  (write-bad-fd) end
  write-bad-fd: exit(0)
Differences in `diff -u' format:
  (write-bad-fd) begin
  (write-bad-fd) end
+ [+] thread [3] - syscall [1]
  write-bad-fd: exit(0)
Acceptable output:
  (write-bad-fd) begin
  write-bad-fd: exit(-1)
Differences in `diff -u' format:
  (write-bad-fd) begin
- write-bad-fd: exit(-1)
+ (write-bad-fd) end
+ [+] thread [3] - syscall [1]
+ write-bad-fd: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-once -a exec-once -p tests/userprog/child-simple -a child-simple -- -q    -f run exec-once < /dev/null 2> tests/userprog/exec-once.errors |tee tests/userprog/exec-once.output
Copying tests/userprog/exec-once to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-once
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 197 sectors (98 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-once' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'exec-once':
(exec-once) begin
[+] thread [3] - syscall [2]
(child-simple) run
[+] thread [4] - syscall [1]
child-simple: exit(81)
[+] thread [3] - syscall [3]
(exec-once) end
[+] thread [3] - syscall [1]
exec-once: exit(0)
Execution of 'exec-once' complete.
Timer: 506 ticks
Thread: 82 idle ticks, 349 kernel ticks, 79 user ticks
hda2 (filesys): 124 reads, 400 writes
hda3 (scratch): 196 reads, 2 writes
Console: 1092 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/exec-once.ck tests/userprog/exec-once tests/userprog/exec-once.result
FAIL tests/userprog/exec-once
Test output failed to match any acceptable form.

Acceptable output:
  (exec-once) begin
  (child-simple) run
  child-simple: exit(81)
  (exec-once) end
  exec-once: exit(0)
Differences in `diff -u' format:
  (exec-once) begin
+ [+] thread [3] - syscall [2]
  (child-simple) run
+ [+] thread [4] - syscall [1]
  child-simple: exit(81)
+ [+] thread [3] - syscall [3]
  (exec-once) end
+ [+] thread [3] - syscall [1]
  exec-once: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-arg -a exec-arg -p tests/userprog/child-args -a child-args -- -q    -f run exec-arg < /dev/null 2> tests/userprog/exec-arg.errors |tee tests/userprog/exec-arg.output
Copying tests/userprog/exec-arg to scratch partition...
Copying tests/userprog/child-args to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-arg
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 198 sectors (99 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-arg' into the file system...
Putting 'child-args' into the file system...
Erasing ustar archive...
Executing 'exec-arg':
(exec-arg) begin
[+] thread [3] - syscall [2]
[+] thread [3] - syscall [3]
(args) begin
(args) argc = 2
(args) argv[0] = 'child-args'
(args) argv[1] = 'childarg'
(args) argv[2] = null
(args) end
[+] thread [4] - syscall [1]
child-args: exit(0)
(exec-arg) end
[+] thread [3] - syscall [1]
exec-arg: exit(0)
Execution of 'exec-arg' complete.
Timer: 524 ticks
Thread: 83 idle ticks, 344 kernel ticks, 100 user ticks
hda2 (filesys): 126 reads, 402 writes
hda3 (scratch): 197 reads, 2 writes
Console: 1182 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/exec-arg.ck tests/userprog/exec-arg tests/userprog/exec-arg.result
FAIL tests/userprog/exec-arg
Test output failed to match any acceptable form.

Acceptable output:
  (exec-arg) begin
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'childarg'
  (args) argv[2] = null
  (args) end
  child-args: exit(0)
  (exec-arg) end
  exec-arg: exit(0)
Differences in `diff -u' format:
  (exec-arg) begin
+ [+] thread [3] - syscall [2]
+ [+] thread [3] - syscall [3]
  (args) begin
  (args) argc = 2
  (args) argv[0] = 'child-args'
  (args) argv[1] = 'childarg'
  (args) argv[2] = null
  (args) end
+ [+] thread [4] - syscall [1]
  child-args: exit(0)
  (exec-arg) end
+ [+] thread [3] - syscall [1]
  exec-arg: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-multiple -a exec-multiple -p tests/userprog/child-simple -a child-simple -- -q    -f run exec-multiple < /dev/null 2> tests/userprog/exec-multiple.errors |tee tests/userprog/exec-multiple.output
Copying tests/userprog/exec-multiple to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-multiple
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 197 sectors (98 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-multiple' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'exec-multiple':
(exec-multiple) begin
[+] thread [3] - syscall [2]
(child-simple) run
[+] thread [4] - syscall [1]
child-simple: exit(81)
[+] thread [3] - syscall [3]
[+] thread [3] - syscall [2]
(child-simple) run
[+] thread [5] - syscall [1]
child-simple: exit(81)
[+] thread [3] - syscall [3]
[+] thread [3] - syscall [2]
(child-simple) run
[+] thread [6] - syscall [1]
child-simple: exit(81)
[+] thread [3] - syscall [3]
[+] thread [3] - syscall [2]
(child-simple) run
[+] thread [7] - syscall [1]
child-simple: exit(81)
[+] thread [3] - syscall [3]
(exec-multiple) end
[+] thread [3] - syscall [1]
exec-multiple: exit(0)
Execution of 'exec-multiple' complete.
Timer: 701 ticks
Thread: 85 idle ticks, 397 kernel ticks, 222 user ticks
hda2 (filesys): 232 reads, 400 writes
hda3 (scratch): 196 reads, 2 writes
Console: 1508 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/exec-multiple.ck tests/userprog/exec-multiple tests/userprog/exec-multiple.result
FAIL tests/userprog/exec-multiple
Test output failed to match any acceptable form.

Acceptable output:
  (exec-multiple) begin
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (child-simple) run
  child-simple: exit(81)
  (exec-multiple) end
  exec-multiple: exit(0)
Differences in `diff -u' format:
  (exec-multiple) begin
+ [+] thread [3] - syscall [2]
  (child-simple) run
+ [+] thread [4] - syscall [1]
  child-simple: exit(81)
+ [+] thread [3] - syscall [3]
+ [+] thread [3] - syscall [2]
  (child-simple) run
+ [+] thread [5] - syscall [1]
  child-simple: exit(81)
+ [+] thread [3] - syscall [3]
+ [+] thread [3] - syscall [2]
  (child-simple) run
+ [+] thread [6] - syscall [1]
  child-simple: exit(81)
+ [+] thread [3] - syscall [3]
+ [+] thread [3] - syscall [2]
  (child-simple) run
+ [+] thread [7] - syscall [1]
  child-simple: exit(81)
+ [+] thread [3] - syscall [3]
  (exec-multiple) end
+ [+] thread [3] - syscall [1]
  exec-multiple: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-missing -a exec-missing -- -q    -f run exec-missing < /dev/null 2> tests/userprog/exec-missing.errors |tee tests/userprog/exec-missing.output
Copying tests/userprog/exec-missing to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-missing
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-missing' into the file system...
Erasing ustar archive...
Executing 'exec-missing':
(exec-missing) begin
[+] thread [3] - syscall [2]
load: no-such-file: open failed
(exec-missing) exec("no-such-file"): -1
(exec-missing) end
[+] thread [3] - syscall [1]
exec-missing: exit(0)
Execution of 'exec-missing' complete.
Timer: 352 ticks
Thread: 43 idle ticks, 249 kernel ticks, 63 user ticks
hda2 (filesys): 80 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 1036 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/exec-missing.ck tests/userprog/exec-missing tests/userprog/exec-missing.result
FAIL tests/userprog/exec-missing
Test output failed to match any acceptable form.

Acceptable output:
  (exec-missing) begin
  load: no-such-file: open failed
  (exec-missing) exec("no-such-file"): -1
  no-such-file: exit(-1)
  (exec-missing) end
  exec-missing: exit(0)
Differences in `diff -u' format:
  (exec-missing) begin
+ [+] thread [3] - syscall [2]
  load: no-such-file: open failed
  (exec-missing) exec("no-such-file"): -1
- no-such-file: exit(-1)
  (exec-missing) end
+ [+] thread [3] - syscall [1]
  exec-missing: exit(0)
Acceptable output:
  (exec-missing) begin
  load: no-such-file: open failed
  (exec-missing) exec("no-such-file"): -1
  (exec-missing) end
  exec-missing: exit(0)
Differences in `diff -u' format:
  (exec-missing) begin
+ [+] thread [3] - syscall [2]
  load: no-such-file: open failed
  (exec-missing) exec("no-such-file"): -1
  (exec-missing) end
+ [+] thread [3] - syscall [1]
  exec-missing: exit(0)
Acceptable output:
  (exec-missing) begin
  load: no-such-file: open failed
  no-such-file: exit(-1)
  (exec-missing) exec("no-such-file"): -1
  (exec-missing) end
  exec-missing: exit(0)
Differences in `diff -u' format:
  (exec-missing) begin
+ [+] thread [3] - syscall [2]
  load: no-such-file: open failed
- no-such-file: exit(-1)
  (exec-missing) exec("no-such-file"): -1
  (exec-missing) end
+ [+] thread [3] - syscall [1]
  exec-missing: exit(0)
Acceptable output:
  (exec-missing) begin
  (exec-missing) exec("no-such-file"): -1
  (exec-missing) end
  exec-missing: exit(0)
Differences in `diff -u' format:
  (exec-missing) begin
+ [+] thread [3] - syscall [2]
+ load: no-such-file: open failed
  (exec-missing) exec("no-such-file"): -1
  (exec-missing) end
+ [+] thread [3] - syscall [1]
  exec-missing: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/exec-bad-ptr -a exec-bad-ptr -- -q    -f run exec-bad-ptr < /dev/null 2> tests/userprog/exec-bad-ptr.errors |tee tests/userprog/exec-bad-ptr.output
Copying tests/userprog/exec-bad-ptr to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run exec-bad-ptr
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'exec-bad-ptr' into the file system...
Erasing ustar archive...
Executing 'exec-bad-ptr':
(exec-bad-ptr) begin
[+] thread [3] - syscall [2]
exec-bad-ptr: exit(-1)
Execution of 'exec-bad-ptr' complete.
Timer: 319 ticks
Thread: 42 idle ticks, 248 kernel ticks, 32 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 917 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/exec-bad-ptr.ck tests/userprog/exec-bad-ptr tests/userprog/exec-bad-ptr.result
FAIL tests/userprog/exec-bad-ptr
Test output failed to match any acceptable form.

Acceptable output:
  (exec-bad-ptr) begin
  (exec-bad-ptr) end
  exec-bad-ptr: exit(0)
Differences in `diff -u' format:
  (exec-bad-ptr) begin
- (exec-bad-ptr) end
- exec-bad-ptr: exit(0)
+ [+] thread [3] - syscall [2]
+ exec-bad-ptr: exit(-1)
Acceptable output:
  (exec-bad-ptr) begin
  exec-bad-ptr: exit(-1)
Differences in `diff -u' format:
  (exec-bad-ptr) begin
+ [+] thread [3] - syscall [2]
  exec-bad-ptr: exit(-1)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-simple -a wait-simple -p tests/userprog/child-simple -a child-simple -- -q    -f run wait-simple < /dev/null 2> tests/userprog/wait-simple.errors |tee tests/userprog/wait-simple.output
Copying tests/userprog/wait-simple to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-simple
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 197 sectors (98 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-simple' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'wait-simple':
(wait-simple) begin
[+] thread [3] - syscall [2]
(child-simple) run
[+] thread [4] - syscall [1]
child-simple: exit(81)
[+] thread [3] - syscall [3]
(wait-simple) wait(exec()) = 81
(wait-simple) end
[+] thread [3] - syscall [1]
wait-simple: exit(0)
Execution of 'wait-simple' complete.
Timer: 512 ticks
Thread: 82 idle ticks, 346 kernel ticks, 87 user ticks
hda2 (filesys): 124 reads, 400 writes
hda3 (scratch): 196 reads, 2 writes
Console: 1138 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/wait-simple.ck tests/userprog/wait-simple tests/userprog/wait-simple.result
FAIL tests/userprog/wait-simple
Test output failed to match any acceptable form.

Acceptable output:
  (wait-simple) begin
  (child-simple) run
  child-simple: exit(81)
  (wait-simple) wait(exec()) = 81
  (wait-simple) end
  wait-simple: exit(0)
Differences in `diff -u' format:
  (wait-simple) begin
+ [+] thread [3] - syscall [2]
  (child-simple) run
+ [+] thread [4] - syscall [1]
  child-simple: exit(81)
+ [+] thread [3] - syscall [3]
  (wait-simple) wait(exec()) = 81
  (wait-simple) end
+ [+] thread [3] - syscall [1]
  wait-simple: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-twice -a wait-twice -p tests/userprog/child-simple -a child-simple -- -q    -f run wait-twice < /dev/null 2> tests/userprog/wait-twice.errors |tee tests/userprog/wait-twice.output
Copying tests/userprog/wait-twice to scratch partition...
Copying tests/userprog/child-simple to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-twice
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 198 sectors (99 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-twice' into the file system...
Putting 'child-simple' into the file system...
Erasing ustar archive...
Executing 'wait-twice':
(wait-twice) begin
[+] thread [3] - syscall [2]
(child-simple) run
[+] thread [4] - syscall [1]
child-simple: exit(81)
[+] thread [3] - syscall [3]
(wait-twice) wait(exec()) = 81
[+] thread [3] - syscall [3]
(wait-twice) wait(exec()) = -1
(wait-twice) end
[+] thread [3] - syscall [1]
wait-twice: exit(0)
Execution of 'wait-twice' complete.
Timer: 521 ticks
Thread: 83 idle ticks, 347 kernel ticks, 93 user ticks
hda2 (filesys): 124 reads, 402 writes
hda3 (scratch): 197 reads, 2 writes
Console: 1190 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/wait-twice.ck tests/userprog/wait-twice tests/userprog/wait-twice.result
FAIL tests/userprog/wait-twice
Test output failed to match any acceptable form.

Acceptable output:
  (wait-twice) begin
  (child-simple) run
  child-simple: exit(81)
  (wait-twice) wait(exec()) = 81
  (wait-twice) wait(exec()) = -1
  (wait-twice) end
  wait-twice: exit(0)
Differences in `diff -u' format:
  (wait-twice) begin
+ [+] thread [3] - syscall [2]
  (child-simple) run
+ [+] thread [4] - syscall [1]
  child-simple: exit(81)
+ [+] thread [3] - syscall [3]
  (wait-twice) wait(exec()) = 81
+ [+] thread [3] - syscall [3]
  (wait-twice) wait(exec()) = -1
  (wait-twice) end
+ [+] thread [3] - syscall [1]
  wait-twice: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-killed -a wait-killed -p tests/userprog/child-bad -a child-bad -- -q    -f run wait-killed < /dev/null 2> tests/userprog/wait-killed.errors |tee tests/userprog/wait-killed.output
Copying tests/userprog/wait-killed to scratch partition...
Copying tests/userprog/child-bad to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-killed
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 198 sectors (99 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-killed' into the file system...
Putting 'child-bad' into the file system...
Erasing ustar archive...
Executing 'wait-killed':
(wait-killed) begin
[+] thread [3] - syscall [2]
(child-bad) begin
child-bad: exit(-1)
[+] thread [3] - syscall [3]
(wait-killed) wait(exec()) = -1
(wait-killed) end
[+] thread [3] - syscall [1]
wait-killed: exit(0)
Execution of 'wait-killed' complete.
Timer: 508 ticks
Thread: 84 idle ticks, 346 kernel ticks, 81 user ticks
hda2 (filesys): 126 reads, 402 writes
hda3 (scratch): 197 reads, 2 writes
Console: 1102 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/wait-killed.ck tests/userprog/wait-killed tests/userprog/wait-killed.result
FAIL tests/userprog/wait-killed
Test output failed to match any acceptable form.

Acceptable output:
  (wait-killed) begin
  (child-bad) begin
  child-bad: exit(-1)
  (wait-killed) wait(exec()) = -1
  (wait-killed) end
  wait-killed: exit(0)
Differences in `diff -u' format:
  (wait-killed) begin
+ [+] thread [3] - syscall [2]
  (child-bad) begin
  child-bad: exit(-1)
+ [+] thread [3] - syscall [3]
  (wait-killed) wait(exec()) = -1
  (wait-killed) end
+ [+] thread [3] - syscall [1]
  wait-killed: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/wait-bad-pid -a wait-bad-pid -- -q    -f run wait-bad-pid < /dev/null 2> tests/userprog/wait-bad-pid.errors |tee tests/userprog/wait-bad-pid.output
Copying tests/userprog/wait-bad-pid to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run wait-bad-pid
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'wait-bad-pid' into the file system...
Erasing ustar archive...
Executing 'wait-bad-pid':
(wait-bad-pid) begin
[+] thread [3] - syscall [3]
(wait-bad-pid) end
[+] thread [3] - syscall [1]
wait-bad-pid: exit(0)
Execution of 'wait-bad-pid' complete.
Timer: 326 ticks
Thread: 42 idle ticks, 247 kernel ticks, 40 user ticks
hda2 (filesys): 62 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 964 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/wait-bad-pid.ck tests/userprog/wait-bad-pid tests/userprog/wait-bad-pid.result
FAIL tests/userprog/wait-bad-pid
Test output failed to match any acceptable form.

Acceptable output:
  (wait-bad-pid) begin
  (wait-bad-pid) end
  wait-bad-pid: exit(0)
Differences in `diff -u' format:
  (wait-bad-pid) begin
+ [+] thread [3] - syscall [3]
  (wait-bad-pid) end
+ [+] thread [3] - syscall [1]
  wait-bad-pid: exit(0)
Acceptable output:
  (wait-bad-pid) begin
  wait-bad-pid: exit(-1)
Differences in `diff -u' format:
  (wait-bad-pid) begin
- wait-bad-pid: exit(-1)
+ [+] thread [3] - syscall [3]
+ (wait-bad-pid) end
+ [+] thread [3] - syscall [1]
+ wait-bad-pid: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/multi-recurse -a multi-recurse -- -q    -f run 'multi-recurse 15' < /dev/null 2> tests/userprog/multi-recurse.errors |tee tests/userprog/multi-recurse.output
Copying tests/userprog/multi-recurse to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run 'multi-recurse 15'
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 112 sectors (56 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'multi-recurse' into the file system...
Erasing ustar archive...
Executing 'multi-recurse 15':
(multi-recurse) begin 15
(multi-recurse) exec("multi-recurse 14")
[+] thread [3] - syscall [2]
(multi-recurse) begin 14
(multi-recurse) exec("multi-recurse 13")
[+] thread [4] - syscall [2]
[+] thread [3] - syscall [3]
(multi-recurse) begin 13
(multi-recurse) exec("multi-recurse 12")
[+] thread [5] - syscall [2]
[+] thread [4] - syscall [3]
(multi-recurse) begin 12
[+] thread [5] - syscall [3]
(multi-recurse) exec("multi-recurse 11")
[+] thread [6] - syscall [2]
[+] thread [6] - syscall [3]
(multi-recurse) begin 11
(multi-recurse) exec("multi-recurse 10")
[+] thread [7] - syscall [2]
[+] thread [7] - syscall [3]
(multi-recurse) begin 10
(multi-recurse) exec("multi-recurse 9")
[+] thread [8] - syscall [2]
[+] thread [8] - syscall [3]
(multi-recurse) begin 9
(multi-recurse) exec("multi-recurse 8")
[+] thread [9] - syscall [2]
[+] thread [9] - syscall [3]
(multi-recurse) begin 8
(multi-recurse) exec("multi-recurse 7")
[+] thread [10] - syscall [2]
[+] thread [10] - syscall [3]
(multi-recurse) begin 7
(multi-recurse) exec("multi-recurse 6")
[+] thread [11] - syscall [2]
[+] thread [11] - syscall [3]
(multi-recurse) begin 6
(multi-recurse) exec("multi-recurse 5")
[+] thread [12] - syscall [2]
[+] thread [12] - syscall [3]
(multi-recurse) begin 5
(multi-recurse) exec("multi-recurse 4")
[+] thread [13] - syscall [2]
[+] thread [13] - syscall [3]
(multi-recurse) begin 4
(multi-recurse) exec("multi-recurse 3")
[+] thread [14] - syscall [2]
(multi-recurse) begin 3
(multi-recurse) exec("multi-recurse 2")
[+] thread [15] - syscall [2]
[+] thread [14] - syscall [3]
(multi-recurse) begin 2
(multi-recurse) exec("multi-recurse 1")
[+] thread [16] - syscall [2]
[+] thread [15] - syscall [3]
(multi-recurse) begin 1
(multi-recurse) exec("multi-recurse 0")
[+] thread [17] - syscall [2]
[+] thread [16] - syscall [3]
(multi-recurse) begin 0
(multi-recurse) end 0
[+] thread [18] - syscall [1]
multi-recurse: exit(0)
[+] thread [17] - syscall [3]
(multi-recurse) end 1
[+] thread [17] - syscall [1]
multi-recurse: exit(1)
(multi-recurse) end 2
[+] thread [16] - syscall [1]
multi-recurse: exit(2)
(multi-recurse) end 3
[+] thread [15] - syscall [1]
multi-recurse: exit(3)
(multi-recurse) end 4
[+] thread [14] - syscall [1]
multi-recurse: exit(4)
(multi-recurse) end 5
[+] thread [13] - syscall [1]
multi-recurse: exit(5)
(multi-recurse) end 6
[+] thread [12] - syscall [1]
multi-recurse: exit(6)
(multi-recurse) end 7
[+] thread [11] - syscall [1]
multi-recurse: exit(7)
(multi-recurse) end 8
[+] thread [10] - syscall [1]
multi-recurse: exit(8)
(multi-recurse) end 9
[+] thread [9] - syscall [1]
multi-recurse: exit(9)
(multi-recurse) end 10
[+] thread [8] - syscall [1]
multi-recurse: exit(10)
(multi-recurse) end 11
[+] thread [7] - syscall [1]
multi-recurse: exit(11)
(multi-recurse) end 12
[+] thread [6] - syscall [1]
multi-recurse: exit(12)
(multi-recurse) end 13
[+] thread [5] - syscall [1]
multi-recurse: exit(13)
(multi-recurse) end 14
[+] thread [4] - syscall [1]
multi-recurse: exit(14)
(multi-recurse) end 15
[+] thread [3] - syscall [1]
multi-recurse: exit(15)
Execution of 'multi-recurse 15' complete.
Timer: 1512 ticks
Thread: 49 idle ticks, 523 kernel ticks, 944 user ticks
hda2 (filesys): 554 reads, 228 writes
hda3 (scratch): 111 reads, 2 writes
Console: 3949 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/multi-recurse.ck tests/userprog/multi-recurse tests/userprog/multi-recurse.result
FAIL tests/userprog/multi-recurse
Test output failed to match any acceptable form.

Acceptable output:
  (multi-recurse) begin 15
  (multi-recurse) exec("multi-recurse 14")
  (multi-recurse) begin 14
  (multi-recurse) exec("multi-recurse 13")
  (multi-recurse) begin 13
  (multi-recurse) exec("multi-recurse 12")
  (multi-recurse) begin 12
  (multi-recurse) exec("multi-recurse 11")
  (multi-recurse) begin 11
  (multi-recurse) exec("multi-recurse 10")
  (multi-recurse) begin 10
  (multi-recurse) exec("multi-recurse 9")
  (multi-recurse) begin 9
  (multi-recurse) exec("multi-recurse 8")
  (multi-recurse) begin 8
  (multi-recurse) exec("multi-recurse 7")
  (multi-recurse) begin 7
  (multi-recurse) exec("multi-recurse 6")
  (multi-recurse) begin 6
  (multi-recurse) exec("multi-recurse 5")
  (multi-recurse) begin 5
  (multi-recurse) exec("multi-recurse 4")
  (multi-recurse) begin 4
  (multi-recurse) exec("multi-recurse 3")
  (multi-recurse) begin 3
  (multi-recurse) exec("multi-recurse 2")
  (multi-recurse) begin 2
  (multi-recurse) exec("multi-recurse 1")
  (multi-recurse) begin 1
  (multi-recurse) exec("multi-recurse 0")
  (multi-recurse) begin 0
  (multi-recurse) end 0
  multi-recurse: exit(0)
  (multi-recurse) end 1
  multi-recurse: exit(1)
  (multi-recurse) end 2
  multi-recurse: exit(2)
  (multi-recurse) end 3
  multi-recurse: exit(3)
  (multi-recurse) end 4
  multi-recurse: exit(4)
  (multi-recurse) end 5
  multi-recurse: exit(5)
  (multi-recurse) end 6
  multi-recurse: exit(6)
  (multi-recurse) end 7
  multi-recurse: exit(7)
  (multi-recurse) end 8
  multi-recurse: exit(8)
  (multi-recurse) end 9
  multi-recurse: exit(9)
  (multi-recurse) end 10
  multi-recurse: exit(10)
  (multi-recurse) end 11
  multi-recurse: exit(11)
  (multi-recurse) end 12
  multi-recurse: exit(12)
  (multi-recurse) end 13
  multi-recurse: exit(13)
  (multi-recurse) end 14
  multi-recurse: exit(14)
  (multi-recurse) end 15
  multi-recurse: exit(15)
Differences in `diff -u' format:
  (multi-recurse) begin 15
  (multi-recurse) exec("multi-recurse 14")
+ [+] thread [3] - syscall [2]
  (multi-recurse) begin 14
  (multi-recurse) exec("multi-recurse 13")
+ [+] thread [4] - syscall [2]
+ [+] thread [3] - syscall [3]
  (multi-recurse) begin 13
  (multi-recurse) exec("multi-recurse 12")
+ [+] thread [5] - syscall [2]
+ [+] thread [4] - syscall [3]
  (multi-recurse) begin 12
+ [+] thread [5] - syscall [3]
  (multi-recurse) exec("multi-recurse 11")
+ [+] thread [6] - syscall [2]
+ [+] thread [6] - syscall [3]
  (multi-recurse) begin 11
  (multi-recurse) exec("multi-recurse 10")
+ [+] thread [7] - syscall [2]
+ [+] thread [7] - syscall [3]
  (multi-recurse) begin 10
  (multi-recurse) exec("multi-recurse 9")
+ [+] thread [8] - syscall [2]
+ [+] thread [8] - syscall [3]
  (multi-recurse) begin 9
  (multi-recurse) exec("multi-recurse 8")
+ [+] thread [9] - syscall [2]
+ [+] thread [9] - syscall [3]
  (multi-recurse) begin 8
  (multi-recurse) exec("multi-recurse 7")
+ [+] thread [10] - syscall [2]
+ [+] thread [10] - syscall [3]
  (multi-recurse) begin 7
  (multi-recurse) exec("multi-recurse 6")
+ [+] thread [11] - syscall [2]
+ [+] thread [11] - syscall [3]
  (multi-recurse) begin 6
  (multi-recurse) exec("multi-recurse 5")
+ [+] thread [12] - syscall [2]
+ [+] thread [12] - syscall [3]
  (multi-recurse) begin 5
  (multi-recurse) exec("multi-recurse 4")
+ [+] thread [13] - syscall [2]
+ [+] thread [13] - syscall [3]
  (multi-recurse) begin 4
  (multi-recurse) exec("multi-recurse 3")
+ [+] thread [14] - syscall [2]
  (multi-recurse) begin 3
  (multi-recurse) exec("multi-recurse 2")
+ [+] thread [15] - syscall [2]
+ [+] thread [14] - syscall [3]
  (multi-recurse) begin 2
  (multi-recurse) exec("multi-recurse 1")
+ [+] thread [16] - syscall [2]
+ [+] thread [15] - syscall [3]
  (multi-recurse) begin 1
  (multi-recurse) exec("multi-recurse 0")
+ [+] thread [17] - syscall [2]
+ [+] thread [16] - syscall [3]
  (multi-recurse) begin 0
  (multi-recurse) end 0
+ [+] thread [18] - syscall [1]
  multi-recurse: exit(0)
+ [+] thread [17] - syscall [3]
  (multi-recurse) end 1
+ [+] thread [17] - syscall [1]
  multi-recurse: exit(1)
  (multi-recurse) end 2
+ [+] thread [16] - syscall [1]
  multi-recurse: exit(2)
  (multi-recurse) end 3
+ [+] thread [15] - syscall [1]
  multi-recurse: exit(3)
  (multi-recurse) end 4
+ [+] thread [14] - syscall [1]
  multi-recurse: exit(4)
  (multi-recurse) end 5
+ [+] thread [13] - syscall [1]
  multi-recurse: exit(5)
  (multi-recurse) end 6
+ [+] thread [12] - syscall [1]
  multi-recurse: exit(6)
  (multi-recurse) end 7
+ [+] thread [11] - syscall [1]
  multi-recurse: exit(7)
  (multi-recurse) end 8
+ [+] thread [10] - syscall [1]
  multi-recurse: exit(8)
  (multi-recurse) end 9
+ [+] thread [9] - syscall [1]
  multi-recurse: exit(9)
  (multi-recurse) end 10
+ [+] thread [8] - syscall [1]
  multi-recurse: exit(10)
  (multi-recurse) end 11
+ [+] thread [7] - syscall [1]
  multi-recurse: exit(11)
  (multi-recurse) end 12
+ [+] thread [6] - syscall [1]
  multi-recurse: exit(12)
  (multi-recurse) end 13
+ [+] thread [5] - syscall [1]
  multi-recurse: exit(13)
  (multi-recurse) end 14
+ [+] thread [4] - syscall [1]
  multi-recurse: exit(14)
  (multi-recurse) end 15
+ [+] thread [3] - syscall [1]
  multi-recurse: exit(15)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/multi-child-fd -a multi-child-fd -p ../../tests/userprog/sample.txt -a sample.txt -p tests/userprog/child-close -a child-close -- -q    -f run multi-child-fd < /dev/null 2> tests/userprog/multi-child-fd.errors |tee tests/userprog/multi-child-fd.output
Copying tests/userprog/multi-child-fd to scratch partition...
Copying ../../tests/userprog/sample.txt to scratch partition...
Copying tests/userprog/child-close to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run multi-child-fd
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 213 sectors (106 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'multi-child-fd' into the file system...
Putting 'sample.txt' into the file system...
Putting 'child-close' into the file system...
Erasing ustar archive...
Executing 'multi-child-fd':
(multi-child-fd) begin
(multi-child-fd) open "sample.txt"
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [2]
(child-close) begin
[+] thread [4] - syscall [12]
(child-close) end
[+] thread [4] - syscall [1]
child-close: exit(0)
[+] thread [3] - syscall [3]
(multi-child-fd) wait(exec()) = 0
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
(multi-child-fd) verified contents of "sample.txt"
(multi-child-fd) end
[+] thread [3] - syscall [1]
multi-child-fd: exit(0)
Execution of 'multi-child-fd' complete.
Timer: 594 ticks
Thread: 95 idle ticks, 376 kernel ticks, 126 user ticks
hda2 (filesys): 155 reads, 434 writes
hda3 (scratch): 212 reads, 2 writes
Console: 1427 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/multi-child-fd.ck tests/userprog/multi-child-fd tests/userprog/multi-child-fd.result
FAIL tests/userprog/multi-child-fd
Test output failed to match any acceptable form.

Acceptable output:
  (multi-child-fd) begin
  (multi-child-fd) open "sample.txt"
  (child-close) begin
  (child-close) end
  child-close: exit(0)
  (multi-child-fd) wait(exec()) = 0
  (multi-child-fd) verified contents of "sample.txt"
  (multi-child-fd) end
  multi-child-fd: exit(0)
Differences in `diff -u' format:
  (multi-child-fd) begin
  (multi-child-fd) open "sample.txt"
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [2]
  (child-close) begin
+ [+] thread [4] - syscall [12]
  (child-close) end
+ [+] thread [4] - syscall [1]
  child-close: exit(0)
+ [+] thread [3] - syscall [3]
  (multi-child-fd) wait(exec()) = 0
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
  (multi-child-fd) verified contents of "sample.txt"
  (multi-child-fd) end
+ [+] thread [3] - syscall [1]
  multi-child-fd: exit(0)
Acceptable output:
  (multi-child-fd) begin
  (multi-child-fd) open "sample.txt"
  (child-close) begin
  child-close: exit(-1)
  (multi-child-fd) wait(exec()) = -1
  (multi-child-fd) verified contents of "sample.txt"
  (multi-child-fd) end
  multi-child-fd: exit(0)
Differences in `diff -u' format:
  (multi-child-fd) begin
  (multi-child-fd) open "sample.txt"
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [2]
  (child-close) begin
- child-close: exit(-1)
- (multi-child-fd) wait(exec()) = -1
+ [+] thread [4] - syscall [12]
+ (child-close) end
+ [+] thread [4] - syscall [1]
+ child-close: exit(0)
+ [+] thread [3] - syscall [3]
+ (multi-child-fd) wait(exec()) = 0
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
  (multi-child-fd) verified contents of "sample.txt"
  (multi-child-fd) end
+ [+] thread [3] - syscall [1]
  multi-child-fd: exit(0)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/rox-simple -a rox-simple -- -q    -f run rox-simple < /dev/null 2> tests/userprog/rox-simple.errors |tee tests/userprog/rox-simple.output
Copying tests/userprog/rox-simple to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run rox-simple
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 101 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'rox-simple' into the file system...
Erasing ustar archive...
Executing 'rox-simple':
(rox-simple) begin
(rox-simple) open "rox-simple"
[+] thread [3] - syscall [6]
(rox-simple) read "rox-simple"
[+] thread [3] - syscall [8]
(rox-simple) try to write "rox-simple"
(rox-simple) try to write "rox-simple": FAILED
[+] thread [3] - syscall [1]
rox-simple: exit(1)
Execution of 'rox-simple' complete.
Timer: 352 ticks
Thread: 42 idle ticks, 247 kernel ticks, 66 user ticks
hda2 (filesys): 68 reads, 207 writes
hda3 (scratch): 100 reads, 2 writes
Console: 1111 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/rox-simple.ck tests/userprog/rox-simple tests/userprog/rox-simple.result
FAIL tests/userprog/rox-simple
run: try to write "rox-simple": FAILED
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/rox-child -a rox-child -p tests/userprog/child-rox -a child-rox -- -q    -f run rox-child < /dev/null 2> tests/userprog/rox-child.errors |tee tests/userprog/rox-child.output
Copying tests/userprog/rox-child to scratch partition...
Copying tests/userprog/child-rox to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run rox-child
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 213 sectors (106 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'rox-child' into the file system...
Putting 'child-rox' into the file system...
Erasing ustar archive...
Executing 'rox-child':
(rox-child) begin
(rox-child) open "child-rox"
[+] thread [3] - syscall [6]
(rox-child) read "child-rox"
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
(rox-child) write "child-rox"
(rox-child) exec "child-rox 1"
[+] thread [3] - syscall [2]
(child-rox) begin
[+] thread [4] - syscall [6]
[+] thread [3] - syscall [3]
(child-rox) try to write "child-rox"
(child-rox) try to write "child-rox": FAILED
[+] thread [4] - syscall [1]
child-rox: exit(1)
(rox-child) wait for child: FAILED
[+] thread [3] - syscall [1]
rox-child: exit(1)
Execution of 'rox-child' complete.
Timer: 577 ticks
Thread: 88 idle ticks, 356 kernel ticks, 136 user ticks
hda2 (filesys): 131 reads, 434 writes
hda3 (scratch): 212 reads, 2 writes
Console: 1423 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/rox-child.ck tests/userprog/rox-child tests/userprog/rox-child.result
FAIL tests/userprog/rox-child
run: try to write "child-rox": FAILED
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/rox-multichild -a rox-multichild -p tests/userprog/child-rox -a child-rox -- -q    -f run rox-multichild < /dev/null 2> tests/userprog/rox-multichild.errors |tee tests/userprog/rox-multichild.output
Copying tests/userprog/rox-multichild to scratch partition...
Copying tests/userprog/child-rox to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run rox-multichild
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 213 sectors (106 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'rox-multichild' into the file system...
Putting 'child-rox' into the file system...
Erasing ustar archive...
Executing 'rox-multichild':
(rox-multichild) begin
(rox-multichild) open "child-rox"
[+] thread [3] - syscall [6]
(rox-multichild) read "child-rox"
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
(rox-multichild) write "child-rox"
(rox-multichild) exec "child-rox 5"
[+] thread [3] - syscall [2]
(child-rox) begin
[+] thread [4] - syscall [6]
[+] thread [3] - syscall [3]
(child-rox) try to write "child-rox"
(child-rox) try to write "child-rox": FAILED
[+] thread [4] - syscall [1]
child-rox: exit(1)
(rox-multichild) wait for child: FAILED
[+] thread [3] - syscall [1]
rox-multichild: exit(1)
Execution of 'rox-multichild' complete.
Timer: 582 ticks
Thread: 93 idle ticks, 351 kernel ticks, 141 user ticks
hda2 (filesys): 131 reads, 434 writes
hda3 (scratch): 212 reads, 2 writes
Console: 1478 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/rox-multichild.ck tests/userprog/rox-multichild tests/userprog/rox-multichild.result
FAIL tests/userprog/rox-multichild
run: try to write "child-rox": FAILED
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-read -a bad-read -- -q    -f run bad-read < /dev/null 2> tests/userprog/bad-read.errors |tee tests/userprog/bad-read.output
Copying tests/userprog/bad-read to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run bad-read
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'bad-read' into the file system...
Erasing ustar archive...
Executing 'bad-read':
(bad-read) begin
bad-read: exit(-1)
Execution of 'bad-read' complete.
Timer: 312 ticks
Thread: 42 idle ticks, 246 kernel ticks, 27 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 864 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/bad-read.ck tests/userprog/bad-read tests/userprog/bad-read.result
pass tests/userprog/bad-read
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-write -a bad-write -- -q    -f run bad-write < /dev/null 2> tests/userprog/bad-write.errors |tee tests/userprog/bad-write.output
Copying tests/userprog/bad-write to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run bad-write
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'bad-write' into the file system...
Erasing ustar archive...
Executing 'bad-write':
(bad-write) begin
bad-write: exit(-1)
Execution of 'bad-write' complete.
Timer: 313 ticks
Thread: 41 idle ticks, 246 kernel ticks, 29 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 870 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/bad-write.ck tests/userprog/bad-write tests/userprog/bad-write.result
pass tests/userprog/bad-write
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-read2 -a bad-read2 -- -q    -f run bad-read2 < /dev/null 2> tests/userprog/bad-read2.errors |tee tests/userprog/bad-read2.output
Copying tests/userprog/bad-read2 to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run bad-read2
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'bad-read2' into the file system...
Erasing ustar archive...
Executing 'bad-read2':
(bad-read2) begin
bad-read2: exit(-1)
Execution of 'bad-read2' complete.
Timer: 313 ticks
Thread: 41 idle ticks, 246 kernel ticks, 29 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 870 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/bad-read2.ck tests/userprog/bad-read2 tests/userprog/bad-read2.result
pass tests/userprog/bad-read2
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-write2 -a bad-write2 -- -q    -f run bad-write2 < /dev/null 2> tests/userprog/bad-write2.errors |tee tests/userprog/bad-write2.output
Copying tests/userprog/bad-write2 to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run bad-write2
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'bad-write2' into the file system...
Erasing ustar archive...
Executing 'bad-write2':
(bad-write2) begin
bad-write2: exit(-1)
Execution of 'bad-write2' complete.
Timer: 313 ticks
Thread: 41 idle ticks, 247 kernel ticks, 28 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 876 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/bad-write2.ck tests/userprog/bad-write2 tests/userprog/bad-write2.result
pass tests/userprog/bad-write2
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-jump -a bad-jump -- -q    -f run bad-jump < /dev/null 2> tests/userprog/bad-jump.errors |tee tests/userprog/bad-jump.output
Copying tests/userprog/bad-jump to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run bad-jump
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'bad-jump' into the file system...
Erasing ustar archive...
Executing 'bad-jump':
(bad-jump) begin
bad-jump: exit(-1)
Execution of 'bad-jump' complete.
Timer: 312 ticks
Thread: 42 idle ticks, 246 kernel ticks, 27 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 864 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/bad-jump.ck tests/userprog/bad-jump tests/userprog/bad-jump.result
pass tests/userprog/bad-jump
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/userprog/bad-jump2 -a bad-jump2 -- -q    -f run bad-jump2 < /dev/null 2> tests/userprog/bad-jump2.errors |tee tests/userprog/bad-jump2.output
Copying tests/userprog/bad-jump2 to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run bad-jump2
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 100 sectors (50 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'bad-jump2' into the file system...
Erasing ustar archive...
Executing 'bad-jump2':
(bad-jump2) begin
bad-jump2: exit(-1)
Execution of 'bad-jump2' complete.
Timer: 313 ticks
Thread: 41 idle ticks, 246 kernel ticks, 29 user ticks
hda2 (filesys): 63 reads, 204 writes
hda3 (scratch): 99 reads, 2 writes
Console: 870 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/bad-jump2.ck tests/userprog/bad-jump2 tests/userprog/bad-jump2.result
pass tests/userprog/bad-jump2
pintos -v -k -T 360 --bochs  --filesys-size=2 -p tests/userprog/no-vm/multi-oom -a multi-oom -- -q    -f run multi-oom < /dev/null 2> tests/userprog/no-vm/multi-oom.errors |tee tests/userprog/no-vm/multi-oom.output
Copying tests/userprog/no-vm/multi-oom to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run multi-oom
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 116 sectors (58 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'multi-oom' into the file system...
Erasing ustar archive...
Executing 'multi-oom':
(multi-oom) begin
[+] thread [3] - syscall [2]
multi-oom: exit(-1)
[+] thread [3] - syscall [3]
(multi-oom) wait returned -1.: FAILED
[+] thread [3] - syscall [1]
multi-oom: exit(1)
Execution of 'multi-oom' complete.
Timer: 395 ticks
Thread: 47 idle ticks, 275 kernel ticks, 76 user ticks
hda2 (filesys): 96 reads, 236 writes
hda3 (scratch): 115 reads, 2 writes
Console: 1015 characters output
Keyboard: 0 keys pressed
Exception: 1 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/userprog/no-vm/multi-oom.ck tests/userprog/no-vm/multi-oom tests/userprog/no-vm/multi-oom.result
FAIL tests/userprog/no-vm/multi-oom
run: wait returned -1.: FAILED
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-create -a lg-create -- -q    -f run lg-create < /dev/null 2> tests/filesys/base/lg-create.errors |tee tests/filesys/base/lg-create.output
Copying tests/filesys/base/lg-create to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-create
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-create' into the file system...
Erasing ustar archive...
Executing 'lg-create':
(lg-create) begin
(lg-create) create "blargle"
[+] thread [3] - syscall [4]
(lg-create) open "blargle" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(lg-create) verified contents of "blargle"
(lg-create) close "blargle"
[+] thread [3] - syscall [12]
(lg-create) end
[+] thread [3] - syscall [1]
lg-create: exit(0)
Execution of 'lg-create' complete.
Timer: 1142 ticks
Thread: 41 idle ticks, 281 kernel ticks, 823 user ticks
hda2 (filesys): 235 reads, 364 writes
hda3 (scratch): 103 reads, 2 writes
Console: 5471 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/lg-create.ck tests/filesys/base/lg-create tests/filesys/base/lg-create.result
FAIL tests/filesys/base/lg-create
Test output failed to match any acceptable form.

Acceptable output:
  (lg-create) begin
  (lg-create) create "blargle"
  (lg-create) open "blargle" for verification
  (lg-create) verified contents of "blargle"
  (lg-create) close "blargle"
  (lg-create) end
Differences in `diff -u' format:
  (lg-create) begin
  (lg-create) create "blargle"
+ [+] thread [3] - syscall [4]
  (lg-create) open "blargle" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (lg-create) verified contents of "blargle"
  (lg-create) close "blargle"
+ [+] thread [3] - syscall [12]
  (lg-create) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-full -a lg-full -- -q    -f run lg-full < /dev/null 2> tests/filesys/base/lg-full.errors |tee tests/filesys/base/lg-full.output
Copying tests/filesys/base/lg-full to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-full
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-full' into the file system...
Erasing ustar archive...
Executing 'lg-full':
(lg-full) begin
(lg-full) create "quux"
[+] thread [3] - syscall [4]
(lg-full) open "quux"
[+] thread [3] - syscall [6]
(lg-full) writing "quux"
(lg-full) close "quux"
[+] thread [3] - syscall [12]
(lg-full) open "quux" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(lg-full) verified contents of "quux"
(lg-full) close "quux"
[+] thread [3] - syscall [12]
(lg-full) end
[+] thread [3] - syscall [1]
lg-full: exit(0)
Execution of 'lg-full' complete.
Timer: 1375 ticks
Thread: 45 idle ticks, 279 kernel ticks, 1054 user ticks
hda2 (filesys): 240 reads, 512 writes
hda3 (scratch): 103 reads, 2 writes
Console: 5567 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/lg-full.ck tests/filesys/base/lg-full tests/filesys/base/lg-full.result
FAIL tests/filesys/base/lg-full
Test output failed to match any acceptable form.

Acceptable output:
  (lg-full) begin
  (lg-full) create "quux"
  (lg-full) open "quux"
  (lg-full) writing "quux"
  (lg-full) close "quux"
  (lg-full) open "quux" for verification
  (lg-full) verified contents of "quux"
  (lg-full) close "quux"
  (lg-full) end
Differences in `diff -u' format:
  (lg-full) begin
  (lg-full) create "quux"
+ [+] thread [3] - syscall [4]
  (lg-full) open "quux"
+ [+] thread [3] - syscall [6]
  (lg-full) writing "quux"
  (lg-full) close "quux"
+ [+] thread [3] - syscall [12]
  (lg-full) open "quux" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (lg-full) verified contents of "quux"
  (lg-full) close "quux"
+ [+] thread [3] - syscall [12]
  (lg-full) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-random -a lg-random -- -q    -f run lg-random < /dev/null 2> tests/filesys/base/lg-random.errors |tee tests/filesys/base/lg-random.output
Copying tests/filesys/base/lg-random to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 106 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-random' into the file system...
Erasing ustar archive...
Executing 'lg-random':
(lg-random) begin
(lg-random) create "bazzle"
[+] thread [3] - syscall [4]
(lg-random) open "bazzle"
[+] thread [3] - syscall [6]
(lg-random) write "bazzle" in random order
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
(lg-random) read "bazzle" in random order
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
(lg-random) close "bazzle"
[+] thread [3] - syscall [12]
(lg-random) end
[+] thread [3] - syscall [1]
lg-random: exit(0)
Execution of 'lg-random' complete.
Timer: 2716 ticks
Thread: 57 idle ticks, 281 kernel ticks, 2381 user ticks
hda2 (filesys): 233 reads, 520 writes
hda3 (scratch): 105 reads, 2 writes
Console: 14523 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/lg-random.ck tests/filesys/base/lg-random tests/filesys/base/lg-random.result
FAIL tests/filesys/base/lg-random
Test output failed to match any acceptable form.

Acceptable output:
  (lg-random) begin
  (lg-random) create "bazzle"
  (lg-random) open "bazzle"
  (lg-random) write "bazzle" in random order
  (lg-random) read "bazzle" in random order
  (lg-random) close "bazzle"
  (lg-random) end
Differences in `diff -u' format:
  (lg-random) begin
  (lg-random) create "bazzle"
+ [+] thread [3] - syscall [4]
  (lg-random) open "bazzle"
+ [+] thread [3] - syscall [6]
  (lg-random) write "bazzle" in random order
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
  (lg-random) read "bazzle" in random order
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
  (lg-random) close "bazzle"
+ [+] thread [3] - syscall [12]
  (lg-random) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-seq-block -a lg-seq-block -- -q    -f run lg-seq-block < /dev/null 2> tests/filesys/base/lg-seq-block.errors |tee tests/filesys/base/lg-seq-block.output
Copying tests/filesys/base/lg-seq-block to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-seq-block
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-seq-block' into the file system...
Erasing ustar archive...
Executing 'lg-seq-block':
(lg-seq-block) begin
(lg-seq-block) create "noodle"
[+] thread [3] - syscall [4]
(lg-seq-block) open "noodle"
[+] thread [3] - syscall [6]
(lg-seq-block) writing "noodle"
(lg-seq-block) close "noodle"
[+] thread [3] - syscall [12]
(lg-seq-block) open "noodle" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(lg-seq-block) verified contents of "noodle"
(lg-seq-block) close "noodle"
[+] thread [3] - syscall [12]
(lg-seq-block) end
[+] thread [3] - syscall [1]
lg-seq-block: exit(0)
Execution of 'lg-seq-block' complete.
Timer: 1559 ticks
Thread: 47 idle ticks, 279 kernel ticks, 1236 user ticks
hda2 (filesys): 533 reads, 659 writes
hda3 (scratch): 103 reads, 2 writes
Console: 5651 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/lg-seq-block.ck tests/filesys/base/lg-seq-block tests/filesys/base/lg-seq-block.result
FAIL tests/filesys/base/lg-seq-block
Test output failed to match any acceptable form.

Acceptable output:
  (lg-seq-block) begin
  (lg-seq-block) create "noodle"
  (lg-seq-block) open "noodle"
  (lg-seq-block) writing "noodle"
  (lg-seq-block) close "noodle"
  (lg-seq-block) open "noodle" for verification
  (lg-seq-block) verified contents of "noodle"
  (lg-seq-block) close "noodle"
  (lg-seq-block) end
Differences in `diff -u' format:
  (lg-seq-block) begin
  (lg-seq-block) create "noodle"
+ [+] thread [3] - syscall [4]
  (lg-seq-block) open "noodle"
+ [+] thread [3] - syscall [6]
  (lg-seq-block) writing "noodle"
  (lg-seq-block) close "noodle"
+ [+] thread [3] - syscall [12]
  (lg-seq-block) open "noodle" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (lg-seq-block) verified contents of "noodle"
  (lg-seq-block) close "noodle"
+ [+] thread [3] - syscall [12]
  (lg-seq-block) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/lg-seq-random -a lg-seq-random -- -q    -f run lg-seq-random < /dev/null 2> tests/filesys/base/lg-seq-random.errors |tee tests/filesys/base/lg-seq-random.output
Copying tests/filesys/base/lg-seq-random to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run lg-seq-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'lg-seq-random' into the file system...
Erasing ustar archive...
Executing 'lg-seq-random':
(lg-seq-random) begin
(lg-seq-random) create "nibble"
[+] thread [3] - syscall [4]
(lg-seq-random) open "nibble"
[+] thread [3] - syscall [6]
(lg-seq-random) writing "nibble"
(lg-seq-random) close "nibble"
[+] thread [3] - syscall [12]
(lg-seq-random) open "nibble" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(lg-seq-random) verified contents of "nibble"
(lg-seq-random) close "nibble"
[+] thread [3] - syscall [12]
(lg-seq-random) end
[+] thread [3] - syscall [1]
lg-seq-random: exit(0)
Execution of 'lg-seq-random' complete.
Timer: 1553 ticks
Thread: 47 idle ticks, 278 kernel ticks, 1231 user ticks
hda2 (filesys): 503 reads, 664 writes
hda3 (scratch): 103 reads, 2 writes
Console: 5665 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/lg-seq-random.ck tests/filesys/base/lg-seq-random tests/filesys/base/lg-seq-random.result
FAIL tests/filesys/base/lg-seq-random
Test output failed to match any acceptable form.

Acceptable output:
  (lg-seq-random) begin
  (lg-seq-random) create "nibble"
  (lg-seq-random) open "nibble"
  (lg-seq-random) writing "nibble"
  (lg-seq-random) close "nibble"
  (lg-seq-random) open "nibble" for verification
  (lg-seq-random) verified contents of "nibble"
  (lg-seq-random) close "nibble"
  (lg-seq-random) end
Differences in `diff -u' format:
  (lg-seq-random) begin
  (lg-seq-random) create "nibble"
+ [+] thread [3] - syscall [4]
  (lg-seq-random) open "nibble"
+ [+] thread [3] - syscall [6]
  (lg-seq-random) writing "nibble"
  (lg-seq-random) close "nibble"
+ [+] thread [3] - syscall [12]
  (lg-seq-random) open "nibble" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (lg-seq-random) verified contents of "nibble"
  (lg-seq-random) close "nibble"
+ [+] thread [3] - syscall [12]
  (lg-seq-random) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-create -a sm-create -- -q    -f run sm-create < /dev/null 2> tests/filesys/base/sm-create.errors |tee tests/filesys/base/sm-create.output
Copying tests/filesys/base/sm-create to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-create
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-create' into the file system...
Erasing ustar archive...
Executing 'sm-create':
(sm-create) begin
(sm-create) create "blargle"
[+] thread [3] - syscall [4]
(sm-create) open "blargle" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(sm-create) verified contents of "blargle"
(sm-create) close "blargle"
[+] thread [3] - syscall [12]
(sm-create) end
[+] thread [3] - syscall [1]
sm-create: exit(0)
Execution of 'sm-create' complete.
Timer: 438 ticks
Thread: 42 idle ticks, 252 kernel ticks, 147 user ticks
hda2 (filesys): 99 reads, 228 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1525 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/sm-create.ck tests/filesys/base/sm-create tests/filesys/base/sm-create.result
FAIL tests/filesys/base/sm-create
Test output failed to match any acceptable form.

Acceptable output:
  (sm-create) begin
  (sm-create) create "blargle"
  (sm-create) open "blargle" for verification
  (sm-create) verified contents of "blargle"
  (sm-create) close "blargle"
  (sm-create) end
Differences in `diff -u' format:
  (sm-create) begin
  (sm-create) create "blargle"
+ [+] thread [3] - syscall [4]
  (sm-create) open "blargle" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (sm-create) verified contents of "blargle"
  (sm-create) close "blargle"
+ [+] thread [3] - syscall [12]
  (sm-create) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-full -a sm-full -- -q    -f run sm-full < /dev/null 2> tests/filesys/base/sm-full.errors |tee tests/filesys/base/sm-full.output
Copying tests/filesys/base/sm-full to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-full
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-full' into the file system...
Erasing ustar archive...
Executing 'sm-full':
(sm-full) begin
(sm-full) create "quux"
[+] thread [3] - syscall [4]
(sm-full) open "quux"
[+] thread [3] - syscall [6]
(sm-full) writing "quux"
(sm-full) close "quux"
[+] thread [3] - syscall [12]
(sm-full) open "quux" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(sm-full) verified contents of "quux"
(sm-full) close "quux"
[+] thread [3] - syscall [12]
(sm-full) end
[+] thread [3] - syscall [1]
sm-full: exit(0)
Execution of 'sm-full' complete.
Timer: 474 ticks
Thread: 44 idle ticks, 249 kernel ticks, 184 user ticks
hda2 (filesys): 104 reads, 240 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1621 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/sm-full.ck tests/filesys/base/sm-full tests/filesys/base/sm-full.result
FAIL tests/filesys/base/sm-full
Test output failed to match any acceptable form.

Acceptable output:
  (sm-full) begin
  (sm-full) create "quux"
  (sm-full) open "quux"
  (sm-full) writing "quux"
  (sm-full) close "quux"
  (sm-full) open "quux" for verification
  (sm-full) verified contents of "quux"
  (sm-full) close "quux"
  (sm-full) end
Differences in `diff -u' format:
  (sm-full) begin
  (sm-full) create "quux"
+ [+] thread [3] - syscall [4]
  (sm-full) open "quux"
+ [+] thread [3] - syscall [6]
  (sm-full) writing "quux"
  (sm-full) close "quux"
+ [+] thread [3] - syscall [12]
  (sm-full) open "quux" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (sm-full) verified contents of "quux"
  (sm-full) close "quux"
+ [+] thread [3] - syscall [12]
  (sm-full) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-random -a sm-random -- -q    -f run sm-random < /dev/null 2> tests/filesys/base/sm-random.errors |tee tests/filesys/base/sm-random.output
Copying tests/filesys/base/sm-random to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 106 sectors (53 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-random' into the file system...
Erasing ustar archive...
Executing 'sm-random':
(sm-random) begin
(sm-random) create "bazzle"
[+] thread [3] - syscall [4]
(sm-random) open "bazzle"
[+] thread [3] - syscall [6]
(sm-random) write "bazzle" in random order
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [10]
(sm-random) read "bazzle" in random order
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [10]
[+] thread [3] - syscall [8]
(sm-random) close "bazzle"
[+] thread [3] - syscall [12]
(sm-random) end
[+] thread [3] - syscall [1]
sm-random: exit(0)
Execution of 'sm-random' complete.
Timer: 2158 ticks
Thread: 45 idle ticks, 248 kernel ticks, 1868 user ticks
hda2 (filesys): 335 reads, 350 writes
hda3 (scratch): 105 reads, 2 writes
Console: 12120 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/sm-random.ck tests/filesys/base/sm-random tests/filesys/base/sm-random.result
FAIL tests/filesys/base/sm-random
Test output failed to match any acceptable form.

Acceptable output:
  (sm-random) begin
  (sm-random) create "bazzle"
  (sm-random) open "bazzle"
  (sm-random) write "bazzle" in random order
  (sm-random) read "bazzle" in random order
  (sm-random) close "bazzle"
  (sm-random) end
Differences in `diff -u' format:
  (sm-random) begin
  (sm-random) create "bazzle"
+ [+] thread [3] - syscall [4]
  (sm-random) open "bazzle"
+ [+] thread [3] - syscall [6]
  (sm-random) write "bazzle" in random order
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [10]
  (sm-random) read "bazzle" in random order
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [10]
+ [+] thread [3] - syscall [8]
  (sm-random) close "bazzle"
+ [+] thread [3] - syscall [12]
  (sm-random) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-seq-block -a sm-seq-block -- -q    -f run sm-seq-block < /dev/null 2> tests/filesys/base/sm-seq-block.errors |tee tests/filesys/base/sm-seq-block.output
Copying tests/filesys/base/sm-seq-block to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-seq-block
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-seq-block' into the file system...
Erasing ustar archive...
Executing 'sm-seq-block':
(sm-seq-block) begin
(sm-seq-block) create "noodle"
[+] thread [3] - syscall [4]
(sm-seq-block) open "noodle"
[+] thread [3] - syscall [6]
(sm-seq-block) writing "noodle"
(sm-seq-block) close "noodle"
[+] thread [3] - syscall [12]
(sm-seq-block) open "noodle" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(sm-seq-block) verified contents of "noodle"
(sm-seq-block) close "noodle"
[+] thread [3] - syscall [12]
(sm-seq-block) end
[+] thread [3] - syscall [1]
sm-seq-block: exit(0)
Execution of 'sm-seq-block' complete.
Timer: 496 ticks
Thread: 46 idle ticks, 250 kernel ticks, 203 user ticks
hda2 (filesys): 125 reads, 251 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1705 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/sm-seq-block.ck tests/filesys/base/sm-seq-block tests/filesys/base/sm-seq-block.result
FAIL tests/filesys/base/sm-seq-block
Test output failed to match any acceptable form.

Acceptable output:
  (sm-seq-block) begin
  (sm-seq-block) create "noodle"
  (sm-seq-block) open "noodle"
  (sm-seq-block) writing "noodle"
  (sm-seq-block) close "noodle"
  (sm-seq-block) open "noodle" for verification
  (sm-seq-block) verified contents of "noodle"
  (sm-seq-block) close "noodle"
  (sm-seq-block) end
Differences in `diff -u' format:
  (sm-seq-block) begin
  (sm-seq-block) create "noodle"
+ [+] thread [3] - syscall [4]
  (sm-seq-block) open "noodle"
+ [+] thread [3] - syscall [6]
  (sm-seq-block) writing "noodle"
  (sm-seq-block) close "noodle"
+ [+] thread [3] - syscall [12]
  (sm-seq-block) open "noodle" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (sm-seq-block) verified contents of "noodle"
  (sm-seq-block) close "noodle"
+ [+] thread [3] - syscall [12]
  (sm-seq-block) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/sm-seq-random -a sm-seq-random -- -q    -f run sm-seq-random < /dev/null 2> tests/filesys/base/sm-seq-random.errors |tee tests/filesys/base/sm-seq-random.output
Copying tests/filesys/base/sm-seq-random to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run sm-seq-random
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 104 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'sm-seq-random' into the file system...
Erasing ustar archive...
Executing 'sm-seq-random':
(sm-seq-random) begin
(sm-seq-random) create "nibble"
[+] thread [3] - syscall [4]
(sm-seq-random) open "nibble"
[+] thread [3] - syscall [6]
(sm-seq-random) writing "nibble"
(sm-seq-random) close "nibble"
[+] thread [3] - syscall [12]
(sm-seq-random) open "nibble" for verification
[+] thread [3] - syscall [6]
[+] thread [3] - syscall [7]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
[+] thread [3] - syscall [8]
(sm-seq-random) verified contents of "nibble"
(sm-seq-random) close "nibble"
[+] thread [3] - syscall [12]
(sm-seq-random) end
[+] thread [3] - syscall [1]
sm-seq-random: exit(0)
Execution of 'sm-seq-random' complete.
Timer: 493 ticks
Thread: 47 idle ticks, 248 kernel ticks, 201 user ticks
hda2 (filesys): 118 reads, 248 writes
hda3 (scratch): 103 reads, 2 writes
Console: 1719 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/sm-seq-random.ck tests/filesys/base/sm-seq-random tests/filesys/base/sm-seq-random.result
FAIL tests/filesys/base/sm-seq-random
Test output failed to match any acceptable form.

Acceptable output:
  (sm-seq-random) begin
  (sm-seq-random) create "nibble"
  (sm-seq-random) open "nibble"
  (sm-seq-random) writing "nibble"
  (sm-seq-random) close "nibble"
  (sm-seq-random) open "nibble" for verification
  (sm-seq-random) verified contents of "nibble"
  (sm-seq-random) close "nibble"
  (sm-seq-random) end
Differences in `diff -u' format:
  (sm-seq-random) begin
  (sm-seq-random) create "nibble"
+ [+] thread [3] - syscall [4]
  (sm-seq-random) open "nibble"
+ [+] thread [3] - syscall [6]
  (sm-seq-random) writing "nibble"
  (sm-seq-random) close "nibble"
+ [+] thread [3] - syscall [12]
  (sm-seq-random) open "nibble" for verification
+ [+] thread [3] - syscall [6]
+ [+] thread [3] - syscall [7]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
+ [+] thread [3] - syscall [8]
  (sm-seq-random) verified contents of "nibble"
  (sm-seq-random) close "nibble"
+ [+] thread [3] - syscall [12]
  (sm-seq-random) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 300 --bochs  --filesys-size=2 -p tests/filesys/base/syn-read -a syn-read -p tests/filesys/base/child-syn-read -a child-syn-read -- -q    -f run syn-read < /dev/null 2> tests/filesys/base/syn-read.errors |tee tests/filesys/base/syn-read.output
Copying tests/filesys/base/syn-read to scratch partition...
Copying tests/filesys/base/child-syn-read to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run syn-read
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 218 sectors (109 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-read' into the file system...
Putting 'child-syn-read' into the file system...
Erasing ustar archive...
Executing 'syn-read':
(syn-read) begin
(syn-read) create "data"
[+] thread [3] - syscall [4]
(syn-read) open "data"
[+] thread [3] - syscall [6]
(syn-read) write "data"
(syn-read) close "data"
[+] thread [3] - syscall [12]
(syn-read) exec child 1 of 10: "child-syn-read 0"
[+] thread [3] - syscall [2]
(syn-read) exec child 2 of 10: "child-syn-read 1"
[+] thread [3] - syscall [2]
[+] thread [4] - syscall [6]
load: child-syn-read: open failed
[+] thread [4] - syscall [8]
(syn-read) exec child 2 of 10: "child-syn-read 1": FAILED
[+] thread [3] - syscall [1]
syn-read: exit(1)
[+] thread [4] - syscall [8]
[+] thread [4] - syscall [8]
[+] thread [4] - syscall [8]
[+] thread [4] - syscall [8]
[+] thread [4] - syscall [8]
[+] thread [4] - syscall [8]
[+] thread [4] - syscall [8]
[+] thread [4] - syscall [8]
Execution of 'syn-read' complete.
Timer: 632 ticks
Thread: 92 idle ticks, 341 kernel ticks, 202 user ticks
hda2 (filesys): 166 reads, 450 writes
hda3 (scratch): 217 reads, 2 writes
Console: 1669 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/syn-read.ck tests/filesys/base/syn-read tests/filesys/base/syn-read.result
FAIL tests/filesys/base/syn-read
run: exec child 2 of 10: "child-syn-read 1": FAILED
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/syn-remove -a syn-remove -- -q    -f run syn-remove < /dev/null 2> tests/filesys/base/syn-remove.errors |tee tests/filesys/base/syn-remove.output
Copying tests/filesys/base/syn-remove to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run syn-remove
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 105 sectors (52 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-remove' into the file system...
Erasing ustar archive...
Executing 'syn-remove':
(syn-remove) begin
(syn-remove) create "deleteme"
[+] thread [3] - syscall [4]
(syn-remove) open "deleteme"
[+] thread [3] - syscall [6]
(syn-remove) remove "deleteme"
[+] thread [3] - syscall [5]
(syn-remove) write "deleteme"
(syn-remove) seek "deleteme" to 0
[+] thread [3] - syscall [10]
(syn-remove) read "deleteme"
[+] thread [3] - syscall [8]
(syn-remove) close "deleteme"
[+] thread [3] - syscall [12]
(syn-remove) end
[+] thread [3] - syscall [1]
syn-remove: exit(0)
Execution of 'syn-remove' complete.
Timer: 408 ticks
Thread: 43 idle ticks, 250 kernel ticks, 118 user ticks
hda2 (filesys): 97 reads, 227 writes
hda3 (scratch): 104 reads, 2 writes
Console: 1313 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/syn-remove.ck tests/filesys/base/syn-remove tests/filesys/base/syn-remove.result
FAIL tests/filesys/base/syn-remove
Test output failed to match any acceptable form.

Acceptable output:
  (syn-remove) begin
  (syn-remove) create "deleteme"
  (syn-remove) open "deleteme"
  (syn-remove) remove "deleteme"
  (syn-remove) write "deleteme"
  (syn-remove) seek "deleteme" to 0
  (syn-remove) read "deleteme"
  (syn-remove) close "deleteme"
  (syn-remove) end
Differences in `diff -u' format:
  (syn-remove) begin
  (syn-remove) create "deleteme"
+ [+] thread [3] - syscall [4]
  (syn-remove) open "deleteme"
+ [+] thread [3] - syscall [6]
  (syn-remove) remove "deleteme"
+ [+] thread [3] - syscall [5]
  (syn-remove) write "deleteme"
  (syn-remove) seek "deleteme" to 0
+ [+] thread [3] - syscall [10]
  (syn-remove) read "deleteme"
+ [+] thread [3] - syscall [8]
  (syn-remove) close "deleteme"
+ [+] thread [3] - syscall [12]
  (syn-remove) end
+ [+] thread [3] - syscall [1]

(Process exit codes are excluded for matching purposes.)
pintos -v -k -T 60 --bochs  --filesys-size=2 -p tests/filesys/base/syn-write -a syn-write -p tests/filesys/base/child-syn-wrt -a child-syn-wrt -- -q    -f run syn-write < /dev/null 2> tests/filesys/base/syn-write.errors |tee tests/filesys/base/syn-write.output
Copying tests/filesys/base/syn-write to scratch partition...
Copying tests/filesys/base/child-syn-wrt to scratch partition...
warning: can't find squish-pty, so terminal input will fail
bochs -q
PiLo hda1
Loading.........
Kernel command line: -q -f extract run syn-write
Pintos booting with 4,096 kB RAM...
383 pages available in kernel pool.
383 pages available in user pool.
Calibrating timer...  204,600 loops/s.
hda: 5,040 sectors (2 MB), model "BXHD00011", serial "Generic 1234"
hda1: 147 sectors (73 kB), Pintos OS kernel (20)
hda2: 4,096 sectors (2 MB), Pintos file system (21)
hda3: 218 sectors (109 kB), Pintos scratch (22)
filesys: using hda2
scratch: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-write' into the file system...
Putting 'child-syn-wrt' into the file system...
Erasing ustar archive...
Executing 'syn-write':
(syn-write) begin
(syn-write) create "stuff"
[+] thread [3] - syscall [4]
(syn-write) exec child 1 of 10: "child-syn-wrt 0"
[+] thread [3] - syscall [2]
(syn-write) exec child 2 of 10: "child-syn-wrt 1"
[+] thread [3] - syscall [2]
[+] thread [4] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [4] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 3 of 10: "child-syn-wrt 2"
[+] thread [3] - syscall [2]
[+] thread [5] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [5] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 4 of 10: "child-syn-wrt 3"
[+] thread [3] - syscall [2]
[+] thread [6] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [6] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 5 of 10: "child-syn-wrt 4"
[+] thread [3] - syscall [2]
[+] thread [7] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [7] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 6 of 10: "child-syn-wrt 5"
[+] thread [3] - syscall [2]
[+] thread [8] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [8] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 7 of 10: "child-syn-wrt 6"
[+] thread [3] - syscall [2]
[+] thread [9] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [9] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 8 of 10: "child-syn-wrt 7"
[+] thread [3] - syscall [2]
[+] thread [10] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [10] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 9 of 10: "child-syn-wrt 8"
[+] thread [3] - syscall [2]
[+] thread [11] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [11] - syscall [1]
child-syn-wrt: exit(1)
(syn-write) exec child 10 of 10: "child-syn-wrt 9"
[+] thread [3] - syscall [2]
[+] thread [12] - syscall [6]
((null)) open "stuff": FAILED
[+] thread [12] - syscall [1]
child-syn-wrt: exit(1)
[+] thread [3] - syscall [3]
(syn-write) wait for child 1 of 10 returned 1 (expected 0)
(syn-write) wait for child 1 of 10 returned 1 (expected 0): FAILED
[+] thread [3] - syscall [1]
syn-write: exit(1)
[+] thread [13] - syscall [6]
[+] thread [13] - syscall [10]
[+] thread [13] - syscall [12]
[+] thread [13] - syscall [1]
child-syn-wrt: exit(9)
Execution of 'syn-write' complete.
Timer: 1401 ticks
Thread: 89 idle ticks, 523 kernel ticks, 796 user ticks
hda2 (filesys): 476 reads, 457 writes
hda3 (scratch): 217 reads, 2 writes
Console: 3103 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
========================================================================
                       Bochs x86 Emulator 2.6.8
                Built from SVN snapshot on May 3, 2015
                  Compiled on Sep 26 2016 at 12:15:46
========================================================================
perl -I../.. ../../tests/filesys/base/syn-write.ck tests/filesys/base/syn-write tests/filesys/base/syn-write.result
FAIL tests/filesys/base/syn-write
run: ((null)) open "stuff": FAILED
FAIL tests/userprog/args-none
FAIL tests/userprog/args-single
FAIL tests/userprog/args-multiple
FAIL tests/userprog/args-many
FAIL tests/userprog/args-dbl-space
pass tests/userprog/sc-bad-sp
FAIL tests/userprog/sc-bad-arg
FAIL tests/userprog/sc-boundary
FAIL tests/userprog/sc-boundary-2
pass tests/userprog/halt
FAIL tests/userprog/exit
FAIL tests/userprog/create-normal
FAIL tests/userprog/create-empty
FAIL tests/userprog/create-null
FAIL tests/userprog/create-bad-ptr
FAIL tests/userprog/create-long
FAIL tests/userprog/create-exists
FAIL tests/userprog/create-bound
FAIL tests/userprog/open-normal
FAIL tests/userprog/open-missing
FAIL tests/userprog/open-boundary
FAIL tests/userprog/open-empty
FAIL tests/userprog/open-null
FAIL tests/userprog/open-bad-ptr
FAIL tests/userprog/open-twice
FAIL tests/userprog/close-normal
FAIL tests/userprog/close-twice
FAIL tests/userprog/close-stdin
FAIL tests/userprog/close-stdout
FAIL tests/userprog/close-bad-fd
FAIL tests/userprog/read-normal
FAIL tests/userprog/read-bad-ptr
FAIL tests/userprog/read-boundary
FAIL tests/userprog/read-zero
FAIL tests/userprog/read-stdout
FAIL tests/userprog/read-bad-fd
FAIL tests/userprog/write-normal
FAIL tests/userprog/write-bad-ptr
FAIL tests/userprog/write-boundary
FAIL tests/userprog/write-zero
FAIL tests/userprog/write-stdin
FAIL tests/userprog/write-bad-fd
FAIL tests/userprog/exec-once
FAIL tests/userprog/exec-arg
FAIL tests/userprog/exec-multiple
FAIL tests/userprog/exec-missing
FAIL tests/userprog/exec-bad-ptr
FAIL tests/userprog/wait-simple
FAIL tests/userprog/wait-twice
FAIL tests/userprog/wait-killed
FAIL tests/userprog/wait-bad-pid
FAIL tests/userprog/multi-recurse
FAIL tests/userprog/multi-child-fd
FAIL tests/userprog/rox-simple
FAIL tests/userprog/rox-child
FAIL tests/userprog/rox-multichild
pass tests/userprog/bad-read
pass tests/userprog/bad-write
pass tests/userprog/bad-read2
pass tests/userprog/bad-write2
pass tests/userprog/bad-jump
pass tests/userprog/bad-jump2
FAIL tests/userprog/no-vm/multi-oom
FAIL tests/filesys/base/lg-create
FAIL tests/filesys/base/lg-full
FAIL tests/filesys/base/lg-random
FAIL tests/filesys/base/lg-seq-block
FAIL tests/filesys/base/lg-seq-random
FAIL tests/filesys/base/sm-create
FAIL tests/filesys/base/sm-full
FAIL tests/filesys/base/sm-random
FAIL tests/filesys/base/sm-seq-block
FAIL tests/filesys/base/sm-seq-random
FAIL tests/filesys/base/syn-read
FAIL tests/filesys/base/syn-remove
FAIL tests/filesys/base/syn-write
68 of 76 tests failed.
make[1]: Leaving directory `/home/pintos/pintos/src/userprog/build'
